{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/query.ts"],"sourcesContent":["type QueryTypesSingle = string | number | boolean;\nexport type QueryTypesList = string[] | number[] | boolean[] | Query[];\nexport type QueryTypes = QueryTypesSingle | QueryTypesList;\ntype AttributesTypes = string | string[];\n\n/**\n * Helper class to generate query strings.\n */\nexport class Query {\n  method: string;\n  attribute: AttributesTypes | undefined;\n  values: QueryTypesList | undefined;\n\n  /**\n   * Constructor for Query class.\n   *\n   * @param {string} method\n   * @param {AttributesTypes} attribute\n   * @param {QueryTypes} values\n   */\n  constructor(\n    method: string,\n    attribute?: AttributesTypes,\n    values?: QueryTypes\n  ) {\n    this.method = method;\n    this.attribute = attribute;\n\n    if (values !== undefined) {\n      if (Array.isArray(values)) {\n        this.values = values;\n      } else {\n        this.values = [values] as QueryTypesList;\n      }\n    }\n  }\n\n  /**\n   * Convert the query object to a JSON string.\n   *\n   * @returns {string}\n   */\n  toString(): string {\n    return JSON.stringify({\n      method: this.method,\n      attribute: this.attribute,\n      values: this.values,\n    });\n  }\n\n  /**\n   * Filter resources where attribute is equal to value.\n   *\n   * @param {string} attribute\n   * @param {QueryTypes} value\n   * @returns {string}\n   */\n  static equal = (attribute: string, value: QueryTypes): string =>\n    new Query(\"equal\", attribute, value).toString();\n\n  /**\n   * Filter resources where attribute is not equal to value.\n   *\n   * @param {string} attribute\n   * @param {QueryTypes} value\n   * @returns {string}\n   */\n  static notEqual = (attribute: string, value: QueryTypes): string =>\n    new Query(\"notEqual\", attribute, value).toString();\n\n  /**\n   * Filter resources where attribute is less than value.\n   *\n   * @param {string} attribute\n   * @param {QueryTypes} value\n   * @returns {string}\n   */\n  static lessThan = (attribute: string, value: QueryTypes): string =>\n    new Query(\"lessThan\", attribute, value).toString();\n\n  /**\n   * Filter resources where attribute is less than or equal to value.\n   *\n   * @param {string} attribute\n   * @param {QueryTypes} value\n   * @returns {string}\n   */\n  static lessThanEqual = (attribute: string, value: QueryTypes): string =>\n    new Query(\"lessThanEqual\", attribute, value).toString();\n\n  /**\n   * Filter resources where attribute is greater than value.\n   *\n   * @param {string} attribute\n   * @param {QueryTypes} value\n   * @returns {string}\n   */\n  static greaterThan = (attribute: string, value: QueryTypes): string =>\n    new Query(\"greaterThan\", attribute, value).toString();\n\n  /**\n   * Filter resources where attribute is greater than or equal to value.\n   *\n   * @param {string} attribute\n   * @param {QueryTypes} value\n   * @returns {string}\n   */\n  static greaterThanEqual = (attribute: string, value: QueryTypes): string =>\n    new Query(\"greaterThanEqual\", attribute, value).toString();\n\n  /**\n   * Filter resources where attribute is null.\n   *\n   * @param {string} attribute\n   * @returns {string}\n   */\n  static isNull = (attribute: string): string =>\n    new Query(\"isNull\", attribute).toString();\n\n  /**\n   * Filter resources where attribute is not null.\n   *\n   * @param {string} attribute\n   * @returns {string}\n   */\n  static isNotNull = (attribute: string): string =>\n    new Query(\"isNotNull\", attribute).toString();\n\n  /**\n   * Filter resources where attribute is between start and end (inclusive).\n   *\n   * @param {string} attribute\n   * @param {string | number} start\n   * @param {string | number} end\n   * @returns {string}\n   */\n  static between = (attribute: string, start: string | number, end: string | number): string =>\n    new Query(\"between\", attribute, [start, end] as QueryTypesList).toString();\n\n  /**\n   * Filter resources where attribute starts with value.\n   *\n   * @param {string} attribute\n   * @param {string} value\n   * @returns {string}\n   */\n  static startsWith = (attribute: string, value: string): string =>\n    new Query(\"startsWith\", attribute, value).toString();\n\n  /**\n   * Filter resources where attribute ends with value.\n   *\n   * @param {string} attribute\n   * @param {string} value\n   * @returns {string}\n   */\n  static endsWith = (attribute: string, value: string): string =>\n    new Query(\"endsWith\", attribute, value).toString();\n\n  /**\n   * Specify which attributes should be returned by the API call.\n   *\n   * @param {string[]} attributes\n   * @returns {string}\n   */\n  static select = (attributes: string[]): string =>\n    new Query(\"select\", undefined, attributes).toString();\n\n  /**\n   * Filter resources by searching attribute for value.\n   * A fulltext index on attribute is required for this query to work.\n   *\n   * @param {string} attribute\n   * @param {string} value\n   * @returns {string}\n   */\n  static search = (attribute: string, value: string): string =>\n    new Query(\"search\", attribute, value).toString();\n\n  /**\n   * Sort results by attribute descending.\n   *\n   * @param {string} attribute\n   * @returns {string}\n   */\n  static orderDesc = (attribute: string): string =>\n    new Query(\"orderDesc\", attribute).toString();\n\n  /**\n   * Sort results by attribute ascending.\n   *\n   * @param {string} attribute\n   * @returns {string}\n   */\n  static orderAsc = (attribute: string): string =>\n    new Query(\"orderAsc\", attribute).toString();\n\n  /**\n   * Return results after documentId.\n   *\n   * @param {string} documentId\n   * @returns {string}\n   */\n  static cursorAfter = (documentId: string): string =>\n    new Query(\"cursorAfter\", undefined, documentId).toString();\n\n  /**\n   * Return results before documentId.\n   *\n   * @param {string} documentId\n   * @returns {string}\n   */\n  static cursorBefore = (documentId: string): string =>\n    new Query(\"cursorBefore\", undefined, documentId).toString();\n\n  /**\n   * Return only limit results.\n   *\n   * @param {number} limit\n   * @returns {string}\n   */\n  static limit = (limit: number): string =>\n    new Query(\"limit\", undefined, limit).toString();\n\n  /**\n   * Filter resources by skipping the first offset results.\n   *\n   * @param {number} offset\n   * @returns {string}\n   */\n  static offset = (offset: number): string =>\n    new Query(\"offset\", undefined, offset).toString();\n\n  /**\n   * Filter resources where attribute contains the specified value.\n   *\n   * @param {string} attribute\n   * @param {string | string[]} value\n   * @returns {string}\n   */\n  static contains = (attribute: string, value: string | string[]): string =>\n    new Query(\"contains\", attribute, value).toString();\n\n  /**\n   * Combine multiple queries using logical OR operator.\n   *\n   * @param {string[]} queries\n   * @returns {string}\n   */\n  static or = (queries: string[]) =>\n    new Query(\"or\", undefined, queries.map((query) => JSON.parse(query))).toString();\n\n  /**\n   * Combine multiple queries using logical AND operator.\n   *\n   * @param {string[]} queries\n   * @returns {string}\n   */\n  static and = (queries: string[]) =>\n    new Query(\"and\", undefined, queries.map((query) => JSON.parse(query))).toString();\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 201, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/client.ts"],"sourcesContent":["import { fetch, FormData, File } from 'node-fetch-native-with-agent';\nimport { createAgent } from 'node-fetch-native-with-agent/agent';\nimport { Models } from './models';\n\ntype Payload = {\n    [key: string]: any;\n}\n\ntype UploadProgress = {\n    $id: string;\n    progress: number;\n    sizeUploaded: number;\n    chunksTotal: number;\n    chunksUploaded: number;\n}\n\ntype Headers = {\n    [key: string]: string;\n}\n\nclass AppwriteException extends Error {\n    code: number;\n    response: string;\n    type: string;\n    constructor(message: string, code: number = 0, type: string = '', response: string = '') {\n        super(message);\n        this.name = 'AppwriteException';\n        this.message = message;\n        this.code = code;\n        this.type = type;\n        this.response = response;\n    }\n}\n\nfunction getUserAgent() {\n    let ua = 'AppwriteNodeJSSDK/14.2.0';\n\n    // `process` is a global in Node.js, but not fully available in all runtimes.\n    const platform: string[] = [];\n    if (typeof process !== 'undefined') {\n        if (typeof process.platform === 'string') platform.push(process.platform);\n        if (typeof process.arch === 'string') platform.push(process.arch);\n    } \n    if (platform.length > 0) {\n        ua += ` (${platform.join('; ')})`;\n    }\n\n    // `navigator.userAgent` is available in Node.js 21 and later.\n    // It's also part of the WinterCG spec, so many edge runtimes provide it.\n    // https://common-min-api.proposal.wintercg.org/#requirements-for-navigatoruseragent\n    // @ts-ignore\n    if (typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string') {\n        // @ts-ignore\n        ua += ` ${navigator.userAgent}`;\n\n    // @ts-ignore\n    } else if (typeof globalThis.EdgeRuntime === 'string') {\n        ua += ` EdgeRuntime`;\n\n    // Older Node.js versions don't have `navigator.userAgent`, so we have to use `process.version`.\n    } else if (typeof process !== 'undefined' && typeof process.version === 'string') {\n        ua += ` Node.js/${process.version}`;\n    }\n\n    return ua;\n}\n\nclass Client {\n    static CHUNK_SIZE = 1024 * 1024 * 5;\n\n    config = {\n        endpoint: 'https://cloud.appwrite.io/v1',\n        selfSigned: false,\n        project: '',\n        key: '',\n        jwt: '',\n        locale: '',\n        session: '',\n        forwardeduseragent: '',\n    };\n    headers: Headers = {\n        'x-sdk-name': 'Node.js',\n        'x-sdk-platform': 'server',\n        'x-sdk-language': 'nodejs',\n        'x-sdk-version': '14.2.0',\n        'user-agent' : getUserAgent(),\n        'X-Appwrite-Response-Format': '1.6.0',\n    };\n\n    /**\n     * Set Endpoint\n     *\n     * Your project endpoint\n     *\n     * @param {string} endpoint\n     *\n     * @returns {this}\n     */\n    setEndpoint(endpoint: string): this {\n        this.config.endpoint = endpoint;\n\n        return this;\n    }\n\n    /**\n     * Set self-signed\n     *\n     * @param {boolean} selfSigned\n     *\n     * @returns {this}\n     */\n    setSelfSigned(selfSigned: boolean): this {\n        // @ts-ignore\n        if (typeof globalThis.EdgeRuntime !== 'undefined') {\n            console.warn('setSelfSigned is not supported in edge runtimes.');\n        }\n\n        this.config.selfSigned = selfSigned;\n\n        return this;\n    }\n\n    /**\n     * Add header\n     *\n     * @param {string} header\n     * @param {string} value\n     *\n     * @returns {this}\n     */\n    addHeader(header: string, value: string): this {\n        this.headers[header.toLowerCase()] = value;\n\n        return this;\n    }\n\n    /**\n     * Set Project\n     *\n     * Your project ID\n     *\n     * @param value string\n     *\n     * @return {this}\n     */\n    setProject(value: string): this {\n        this.headers['X-Appwrite-Project'] = value;\n        this.config.project = value;\n        return this;\n    }\n    /**\n     * Set Key\n     *\n     * Your secret API key\n     *\n     * @param value string\n     *\n     * @return {this}\n     */\n    setKey(value: string): this {\n        this.headers['X-Appwrite-Key'] = value;\n        this.config.key = value;\n        return this;\n    }\n    /**\n     * Set JWT\n     *\n     * Your secret JSON Web Token\n     *\n     * @param value string\n     *\n     * @return {this}\n     */\n    setJWT(value: string): this {\n        this.headers['X-Appwrite-JWT'] = value;\n        this.config.jwt = value;\n        return this;\n    }\n    /**\n     * Set Locale\n     *\n     * @param value string\n     *\n     * @return {this}\n     */\n    setLocale(value: string): this {\n        this.headers['X-Appwrite-Locale'] = value;\n        this.config.locale = value;\n        return this;\n    }\n    /**\n     * Set Session\n     *\n     * The user session to authenticate with\n     *\n     * @param value string\n     *\n     * @return {this}\n     */\n    setSession(value: string): this {\n        this.headers['X-Appwrite-Session'] = value;\n        this.config.session = value;\n        return this;\n    }\n    /**\n     * Set ForwardedUserAgent\n     *\n     * The user agent string of the client that made the request\n     *\n     * @param value string\n     *\n     * @return {this}\n     */\n    setForwardedUserAgent(value: string): this {\n        this.headers['X-Forwarded-User-Agent'] = value;\n        this.config.forwardeduseragent = value;\n        return this;\n    }\n\n    prepareRequest(method: string, url: URL, headers: Headers = {}, params: Payload = {}): { uri: string, options: RequestInit } {\n        method = method.toUpperCase();\n\n        headers = Object.assign({}, this.headers, headers);\n\n        let options: RequestInit = {\n            method,\n            headers,\n            ...createAgent(this.config.endpoint, { rejectUnauthorized: !this.config.selfSigned }),\n        };\n\n        if (method === 'GET') {\n            for (const [key, value] of Object.entries(Client.flatten(params))) {\n                url.searchParams.append(key, value);\n            }\n        } else {\n            switch (headers['content-type']) {\n                case 'application/json':\n                    options.body = JSON.stringify(params);\n                    break;\n\n                case 'multipart/form-data':\n                    const formData = new FormData();\n\n                    for (const [key, value] of Object.entries(params)) {\n                        if (value instanceof File) {\n                            formData.append(key, value, value.name);\n                        } else if (Array.isArray(value)) {\n                            for (const nestedValue of value) {\n                                formData.append(`${key}[]`, nestedValue);\n                            }\n                        } else {\n                            formData.append(key, value);\n                        }\n                    }\n\n                    options.body = formData;\n                    delete headers['content-type'];\n                    break;\n            }\n        }\n\n        return { uri: url.toString(), options };\n    }\n\n    async chunkedUpload(method: string, url: URL, headers: Headers = {}, originalPayload: Payload = {}, onProgress: (progress: UploadProgress) => void) {\n        const file = Object.values(originalPayload).find((value) => value instanceof File);\n\n        if (file.size <= Client.CHUNK_SIZE) {\n            return await this.call(method, url, headers, originalPayload);\n        }\n\n        let start = 0;\n        let response = null;\n\n        while (start < file.size) {\n            let end = start + Client.CHUNK_SIZE; // Prepare end for the next chunk\n            if (end >= file.size) {\n                end = file.size; // Adjust for the last chunk to include the last byte\n            }\n\n            headers['content-range'] = `bytes ${start}-${end-1}/${file.size}`;\n            const chunk = file.slice(start, end);\n\n            let payload = { ...originalPayload, file: new File([chunk], file.name)};\n\n            response = await this.call(method, url, headers, payload);\n\n            if (onProgress && typeof onProgress === 'function') {\n                onProgress({\n                    $id: response.$id,\n                    progress: Math.round((end / file.size) * 100),\n                    sizeUploaded: end,\n                    chunksTotal: Math.ceil(file.size / Client.CHUNK_SIZE),\n                    chunksUploaded: Math.ceil(end / Client.CHUNK_SIZE)\n                });\n            }\n\n            if (response && response.$id) {\n                headers['x-appwrite-id'] = response.$id;\n            }\n\n            start = end;\n        }\n\n        return response;\n    }\n\n    async ping(): Promise<string> {\n        return this.call('GET', new URL(this.config.endpoint + '/ping'));\n    }\n\n    async redirect(method: string, url: URL, headers: Headers = {}, params: Payload = {}): Promise<string> {\n        const { uri, options } = this.prepareRequest(method, url, headers, params);\n        \n        const response = await fetch(uri, {\n            ...options,\n            redirect: 'manual'\n        });\n\n        if (response.status !== 301 && response.status !== 302) {\n            throw new AppwriteException('Invalid redirect', response.status);\n        }\n\n        return response.headers.get('location') || '';\n    }\n\n    async call(method: string, url: URL, headers: Headers = {}, params: Payload = {}, responseType = 'json'): Promise<any> {\n        const { uri, options } = this.prepareRequest(method, url, headers, params);\n\n        let data: any = null;\n\n        const response = await fetch(uri, options);\n\n        const warnings = response.headers.get('x-appwrite-warning');\n        if (warnings) {\n            warnings.split(';').forEach((warning: string) => console.warn('Warning: ' + warning));\n        }\n\n        if (response.headers.get('content-type')?.includes('application/json')) {\n            data = await response.json();\n        } else if (responseType === 'arrayBuffer') {\n            data = await response.arrayBuffer();\n        } else {\n            data = {\n                message: await response.text()\n            };\n        }\n\n        if (400 <= response.status) {\n            throw new AppwriteException(data?.message, response.status, data?.type, data);\n        }\n\n        return data;\n    }\n\n    static flatten(data: Payload, prefix = ''): Payload {\n        let output: Payload = {};\n\n        for (const [key, value] of Object.entries(data)) {\n            let finalKey = prefix ? prefix + '[' + key +']' : key;\n            if (Array.isArray(value)) {\n                output = { ...output, ...Client.flatten(value, finalKey) };\n            } else {\n                output[finalKey] = value;\n            }\n        }\n\n        return output;\n    }\n}\n\nexport { Client, AppwriteException };\nexport { Query } from './query';\nexport type { Models, Payload, UploadProgress };\nexport type { QueryTypes, QueryTypesList } from './query';\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 529, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/services/account.ts"],"sourcesContent":["import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\nimport { AuthenticatorType } from '../enums/authenticator-type';\nimport { AuthenticationFactor } from '../enums/authentication-factor';\nimport { OAuthProvider } from '../enums/o-auth-provider';\n\nexport class Account {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * Get account\n     *\n     * Get the currently logged in user.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async get<Preferences extends Models.Preferences>(): Promise<Models.User<Preferences>> {\n        const apiPath = '/account';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create account\n     *\n     * Use this endpoint to allow a new user to register a new account in your project. After the user registration completes successfully, you can use the [/account/verfication](https://appwrite.io/docs/references/cloud/client-web/account#createVerification) route to start verifying the user email address. To allow the new user to login to their new account, you need to create a new [account session](https://appwrite.io/docs/references/cloud/client-web/account#createEmailSession).\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async create<Preferences extends Models.Preferences>(userId: string, email: string, password: string, name?: string): Promise<Models.User<Preferences>> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        const apiPath = '/account';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update email\n     *\n     * Update currently logged in user account email address. After changing user address, the user confirmation status will get reset. A new confirmation email is not sent automatically however you can use the send confirmation email endpoint again to send the confirmation email. For security measures, user password is required to complete this request.\nThis endpoint can also be used to convert an anonymous account to a normal one, by passing an email address and a new password.\n\n     *\n     * @param {string} email\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async updateEmail<Preferences extends Models.Preferences>(email: string, password: string): Promise<Models.User<Preferences>> {\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        const apiPath = '/account/email';\n        const payload: Payload = {};\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List identities\n     *\n     * Get the list of identities for the currently logged in user.\n     *\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.IdentityList>}\n     */\n    async listIdentities(queries?: string[]): Promise<Models.IdentityList> {\n        const apiPath = '/account/identities';\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete identity\n     *\n     * Delete an identity by its unique ID.\n     *\n     * @param {string} identityId\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async deleteIdentity(identityId: string): Promise<{}> {\n        if (typeof identityId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"identityId\"');\n        }\n        const apiPath = '/account/identities/{identityId}'.replace('{identityId}', identityId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create JWT\n     *\n     * Use this endpoint to create a JSON Web Token. You can use the resulting JWT to authenticate on behalf of the current user when working with the Appwrite server-side API and SDKs. The JWT secret is valid for 15 minutes from its creation and will be invalid if the user will logout in that time frame.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Jwt>}\n     */\n    async createJWT(): Promise<Models.Jwt> {\n        const apiPath = '/account/jwts';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List logs\n     *\n     * Get the list of latest security activity logs for the currently logged in user. Each log returns user IP address, location and date and time of log.\n     *\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.LogList>}\n     */\n    async listLogs(queries?: string[]): Promise<Models.LogList> {\n        const apiPath = '/account/logs';\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update MFA\n     *\n     * Enable or disable MFA on an account.\n     *\n     * @param {boolean} mfa\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async updateMFA<Preferences extends Models.Preferences>(mfa: boolean): Promise<Models.User<Preferences>> {\n        if (typeof mfa === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"mfa\"');\n        }\n        const apiPath = '/account/mfa';\n        const payload: Payload = {};\n        if (typeof mfa !== 'undefined') {\n            payload['mfa'] = mfa;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create authenticator\n     *\n     * Add an authenticator app to be used as an MFA factor. Verify the authenticator using the [verify authenticator](/docs/references/cloud/client-web/account#updateMfaAuthenticator) method.\n     *\n     * @param {AuthenticatorType} type\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaType>}\n     */\n    async createMfaAuthenticator(type: AuthenticatorType): Promise<Models.MfaType> {\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n        const apiPath = '/account/mfa/authenticators/{type}'.replace('{type}', type);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Verify authenticator\n     *\n     * Verify an authenticator app after adding it using the [add authenticator](/docs/references/cloud/client-web/account#createMfaAuthenticator) method.\n     *\n     * @param {AuthenticatorType} type\n     * @param {string} otp\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async updateMfaAuthenticator<Preferences extends Models.Preferences>(type: AuthenticatorType, otp: string): Promise<Models.User<Preferences>> {\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n        if (typeof otp === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"otp\"');\n        }\n        const apiPath = '/account/mfa/authenticators/{type}'.replace('{type}', type);\n        const payload: Payload = {};\n        if (typeof otp !== 'undefined') {\n            payload['otp'] = otp;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete authenticator\n     *\n     * Delete an authenticator for a user by ID.\n     *\n     * @param {AuthenticatorType} type\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async deleteMfaAuthenticator(type: AuthenticatorType): Promise<{}> {\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n        const apiPath = '/account/mfa/authenticators/{type}'.replace('{type}', type);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create MFA challenge\n     *\n     * Begin the process of MFA verification after sign-in. Finish the flow with [updateMfaChallenge](/docs/references/cloud/client-web/account#updateMfaChallenge) method.\n     *\n     * @param {AuthenticationFactor} factor\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaChallenge>}\n     */\n    async createMfaChallenge(factor: AuthenticationFactor): Promise<Models.MfaChallenge> {\n        if (typeof factor === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"factor\"');\n        }\n        const apiPath = '/account/mfa/challenge';\n        const payload: Payload = {};\n        if (typeof factor !== 'undefined') {\n            payload['factor'] = factor;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create MFA challenge (confirmation)\n     *\n     * Complete the MFA challenge by providing the one-time password. Finish the process of MFA verification by providing the one-time password. To begin the flow, use [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.\n     *\n     * @param {string} challengeId\n     * @param {string} otp\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async updateMfaChallenge(challengeId: string, otp: string): Promise<{}> {\n        if (typeof challengeId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"challengeId\"');\n        }\n        if (typeof otp === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"otp\"');\n        }\n        const apiPath = '/account/mfa/challenge';\n        const payload: Payload = {};\n        if (typeof challengeId !== 'undefined') {\n            payload['challengeId'] = challengeId;\n        }\n        if (typeof otp !== 'undefined') {\n            payload['otp'] = otp;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List factors\n     *\n     * List the factors available on the account to be used as a MFA challange.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaFactors>}\n     */\n    async listMfaFactors(): Promise<Models.MfaFactors> {\n        const apiPath = '/account/mfa/factors';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get MFA recovery codes\n     *\n     * Get recovery codes that can be used as backup for MFA flow. Before getting codes, they must be generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to read recovery codes.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaRecoveryCodes>}\n     */\n    async getMfaRecoveryCodes(): Promise<Models.MfaRecoveryCodes> {\n        const apiPath = '/account/mfa/recovery-codes';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create MFA recovery codes\n     *\n     * Generate recovery codes as backup for MFA flow. It&#039;s recommended to generate and show then immediately after user successfully adds their authehticator. Recovery codes can be used as a MFA verification type in [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaRecoveryCodes>}\n     */\n    async createMfaRecoveryCodes(): Promise<Models.MfaRecoveryCodes> {\n        const apiPath = '/account/mfa/recovery-codes';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Regenerate MFA recovery codes\n     *\n     * Regenerate recovery codes that can be used as backup for MFA flow. Before regenerating codes, they must be first generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to regenreate recovery codes.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaRecoveryCodes>}\n     */\n    async updateMfaRecoveryCodes(): Promise<Models.MfaRecoveryCodes> {\n        const apiPath = '/account/mfa/recovery-codes';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update name\n     *\n     * Update currently logged in user account name.\n     *\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async updateName<Preferences extends Models.Preferences>(name: string): Promise<Models.User<Preferences>> {\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = '/account/name';\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update password\n     *\n     * Update currently logged in user password. For validation, user is required to pass in the new password, and the old password. For users created with OAuth, Team Invites and Magic URL, oldPassword is optional.\n     *\n     * @param {string} password\n     * @param {string} oldPassword\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async updatePassword<Preferences extends Models.Preferences>(password: string, oldPassword?: string): Promise<Models.User<Preferences>> {\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        const apiPath = '/account/password';\n        const payload: Payload = {};\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof oldPassword !== 'undefined') {\n            payload['oldPassword'] = oldPassword;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update phone\n     *\n     * Update the currently logged in user&#039;s phone number. After updating the phone number, the phone verification status will be reset. A confirmation SMS is not sent automatically, however you can use the [POST /account/verification/phone](https://appwrite.io/docs/references/cloud/client-web/account#createPhoneVerification) endpoint to send a confirmation SMS.\n     *\n     * @param {string} phone\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async updatePhone<Preferences extends Models.Preferences>(phone: string, password: string): Promise<Models.User<Preferences>> {\n        if (typeof phone === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"phone\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        const apiPath = '/account/phone';\n        const payload: Payload = {};\n        if (typeof phone !== 'undefined') {\n            payload['phone'] = phone;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get account preferences\n     *\n     * Get the preferences as a key-value object for the currently logged in user.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Preferences>}\n     */\n    async getPrefs<Preferences extends Models.Preferences>(): Promise<Preferences> {\n        const apiPath = '/account/prefs';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update preferences\n     *\n     * Update currently logged in user account preferences. The object you pass is stored as is, and replaces any previous value. The maximum allowed prefs size is 64kB and throws error if exceeded.\n     *\n     * @param {Partial<Preferences>} prefs\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async updatePrefs<Preferences extends Models.Preferences>(prefs: Partial<Preferences>): Promise<Models.User<Preferences>> {\n        if (typeof prefs === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"prefs\"');\n        }\n        const apiPath = '/account/prefs';\n        const payload: Payload = {};\n        if (typeof prefs !== 'undefined') {\n            payload['prefs'] = prefs;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create password recovery\n     *\n     * Sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link he is redirected back to your app password reset URL with the secret key and email address values attached to the URL query string. Use the query string params to submit a request to the [PUT /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#updateRecovery) endpoint to complete the process. The verification link sent to the user&#039;s email address is valid for 1 hour.\n     *\n     * @param {string} email\n     * @param {string} url\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     */\n    async createRecovery(email: string, url: string): Promise<Models.Token> {\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof url === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n        const apiPath = '/account/recovery';\n        const payload: Payload = {};\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create password recovery (confirmation)\n     *\n     * Use this endpoint to complete the user account password reset. Both the **userId** and **secret** arguments will be passed as query parameters to the redirect URL you have provided when sending your request to the [POST /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#createRecovery) endpoint.\n\nPlease note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     */\n    async updateRecovery(userId: string, secret: string, password: string): Promise<Models.Token> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        const apiPath = '/account/recovery';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List sessions\n     *\n     * Get the list of active sessions across different devices for the currently logged in user.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.SessionList>}\n     */\n    async listSessions(): Promise<Models.SessionList> {\n        const apiPath = '/account/sessions';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete sessions\n     *\n     * Delete all sessions from the user account and remove any sessions cookies from the end client.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async deleteSessions(): Promise<{}> {\n        const apiPath = '/account/sessions';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create anonymous session\n     *\n     * Use this endpoint to allow a new user to register an anonymous account in your project. This route will also create a new session for the user. To allow the new user to convert an anonymous account to a normal account, you need to update its [email and password](https://appwrite.io/docs/references/cloud/client-web/account#updateEmail) or create an [OAuth2 session](https://appwrite.io/docs/references/cloud/client-web/account#CreateOAuth2Session).\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     */\n    async createAnonymousSession(): Promise<Models.Session> {\n        const apiPath = '/account/sessions/anonymous';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create email password session\n     *\n     * Allow the user to login into their account by providing a valid email and password combination. This route will create a new session for the user.\n\nA user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).\n     *\n     * @param {string} email\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     */\n    async createEmailPasswordSession(email: string, password: string): Promise<Models.Session> {\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        const apiPath = '/account/sessions/email';\n        const payload: Payload = {};\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update magic URL session\n     *\n     * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     */\n    async updateMagicURLSession(userId: string, secret: string): Promise<Models.Session> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n        const apiPath = '/account/sessions/magic-url';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update phone session\n     *\n     * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     */\n    async updatePhoneSession(userId: string, secret: string): Promise<Models.Session> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n        const apiPath = '/account/sessions/phone';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create session\n     *\n     * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     */\n    async createSession(userId: string, secret: string): Promise<Models.Session> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n        const apiPath = '/account/sessions/token';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get session\n     *\n     * Use this endpoint to get a logged in user&#039;s session using a Session ID. Inputting &#039;current&#039; will return the current session being used.\n     *\n     * @param {string} sessionId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     */\n    async getSession(sessionId: string): Promise<Models.Session> {\n        if (typeof sessionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n        const apiPath = '/account/sessions/{sessionId}'.replace('{sessionId}', sessionId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update session\n     *\n     * Use this endpoint to extend a session&#039;s length. Extending a session is useful when session expiry is short. If the session was created using an OAuth provider, this endpoint refreshes the access token from the provider.\n     *\n     * @param {string} sessionId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     */\n    async updateSession(sessionId: string): Promise<Models.Session> {\n        if (typeof sessionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n        const apiPath = '/account/sessions/{sessionId}'.replace('{sessionId}', sessionId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete session\n     *\n     * Logout the user. Use &#039;current&#039; as the session ID to logout on this device, use a session ID to logout on another device. If you&#039;re looking to logout the user on all devices, use [Delete Sessions](https://appwrite.io/docs/references/cloud/client-web/account#deleteSessions) instead.\n     *\n     * @param {string} sessionId\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async deleteSession(sessionId: string): Promise<{}> {\n        if (typeof sessionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n        const apiPath = '/account/sessions/{sessionId}'.replace('{sessionId}', sessionId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update status\n     *\n     * Block the currently logged in user account. Behind the scene, the user record is not deleted but permanently blocked from any access. To completely delete a user, use the Users API instead.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async updateStatus<Preferences extends Models.Preferences>(): Promise<Models.User<Preferences>> {\n        const apiPath = '/account/status';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create email token (OTP)\n     *\n     * Sends the user an email with a secret key for creating a session. If the provided user ID has not be registered, a new user will be created. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user&#039;s email is valid for 15 minutes.\n\nA user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {boolean} phrase\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     */\n    async createEmailToken(userId: string, email: string, phrase?: boolean): Promise<Models.Token> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        const apiPath = '/account/tokens/email';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof phrase !== 'undefined') {\n            payload['phrase'] = phrase;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create magic URL token\n     *\n     * Sends the user an email with a secret key for creating a session. If the provided user ID has not been registered, a new user will be created. When the user clicks the link in the email, the user is redirected back to the URL you provided with the secret key and userId values attached to the URL query string. Use the query string parameters to submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The link sent to the user&#039;s email address is valid for 1 hour.\n\nA user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).\n\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} url\n     * @param {boolean} phrase\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     */\n    async createMagicURLToken(userId: string, email: string, url?: string, phrase?: boolean): Promise<Models.Token> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        const apiPath = '/account/tokens/magic-url';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n        if (typeof phrase !== 'undefined') {\n            payload['phrase'] = phrase;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create OAuth2 token\n     *\n     * Allow the user to login to their account using the OAuth2 provider of their choice. Each OAuth2 provider should be enabled from the Appwrite console first. Use the success and failure arguments to provide a redirect URL&#039;s back to your app when login is completed. \n\nIf authentication succeeds, `userId` and `secret` of a token will be appended to the success URL as query parameters. These can be used to create a new session using the [Create session](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint.\n\nA user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).\n     *\n     * @param {OAuthProvider} provider\n     * @param {string} success\n     * @param {string} failure\n     * @param {string[]} scopes\n     * @throws {AppwriteException}\n     * @returns {Promise<string>}\n     */\n    async createOAuth2Token(provider: OAuthProvider, success?: string, failure?: string, scopes?: string[]): Promise<string> {\n        if (typeof provider === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"provider\"');\n        }\n        const apiPath = '/account/tokens/oauth2/{provider}'.replace('{provider}', provider);\n        const payload: Payload = {};\n        if (typeof success !== 'undefined') {\n            payload['success'] = success;\n        }\n        if (typeof failure !== 'undefined') {\n            payload['failure'] = failure;\n        }\n        if (typeof scopes !== 'undefined') {\n            payload['scopes'] = scopes;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.redirect(\n            'get',\n            uri,\n            apiHeaders,\n            payload\n        );\n    }\n    /**\n     * Create phone token\n     *\n     * Sends the user an SMS with a secret key for creating a session. If the provided user ID has not be registered, a new user will be created. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user&#039;s phone is valid for 15 minutes.\n\nA user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).\n     *\n     * @param {string} userId\n     * @param {string} phone\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     */\n    async createPhoneToken(userId: string, phone: string): Promise<Models.Token> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof phone === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"phone\"');\n        }\n        const apiPath = '/account/tokens/phone';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof phone !== 'undefined') {\n            payload['phone'] = phone;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create email verification\n     *\n     * Use this endpoint to send a verification message to your user email address to confirm they are the valid owners of that address. Both the **userId** and **secret** arguments will be passed as query parameters to the URL you have provided to be attached to the verification email. The provided URL should redirect the user back to your app and allow you to complete the verification process by verifying both the **userId** and **secret** parameters. Learn more about how to [complete the verification process](https://appwrite.io/docs/references/cloud/client-web/account#updateVerification). The verification link sent to the user&#039;s email address is valid for 7 days.\n\nPlease note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md), the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface.\n\n     *\n     * @param {string} url\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     */\n    async createVerification(url: string): Promise<Models.Token> {\n        if (typeof url === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n        const apiPath = '/account/verification';\n        const payload: Payload = {};\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create email verification (confirmation)\n     *\n     * Use this endpoint to complete the user email verification process. Use both the **userId** and **secret** parameters that were attached to your app URL to verify the user email ownership. If confirmed this route will return a 200 status code.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     */\n    async updateVerification(userId: string, secret: string): Promise<Models.Token> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n        const apiPath = '/account/verification';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create phone verification\n     *\n     * Use this endpoint to send a verification SMS to the currently logged in user. This endpoint is meant for use after updating a user&#039;s phone number using the [accountUpdatePhone](https://appwrite.io/docs/references/cloud/client-web/account#updatePhone) endpoint. Learn more about how to [complete the verification process](https://appwrite.io/docs/references/cloud/client-web/account#updatePhoneVerification). The verification code sent to the user&#039;s phone number is valid for 15 minutes.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     */\n    async createPhoneVerification(): Promise<Models.Token> {\n        const apiPath = '/account/verification/phone';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update phone verification (confirmation)\n     *\n     * Use this endpoint to complete the user phone verification process. Use the **userId** and **secret** that were sent to your user&#039;s phone number to verify the user email ownership. If confirmed this route will return a 200 status code.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     */\n    async updatePhoneVerification(userId: string, secret: string): Promise<Models.Token> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n        const apiPath = '/account/verification/phone';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1603, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/services/avatars.ts"],"sourcesContent":["import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\nimport { Browser } from '../enums/browser';\nimport { CreditCard } from '../enums/credit-card';\nimport { Flag } from '../enums/flag';\n\nexport class Avatars {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * Get browser icon\n     *\n     * You can use this endpoint to show different browser icons to your users. The code argument receives the browser code as it appears in your user [GET /account/sessions](https://appwrite.io/docs/references/cloud/client-web/account#getSessions) endpoint. Use width, height and quality arguments to change the output settings.\n\nWhen one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px.\n     *\n     * @param {Browser} code\n     * @param {number} width\n     * @param {number} height\n     * @param {number} quality\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     */\n    async getBrowser(code: Browser, width?: number, height?: number, quality?: number): Promise<ArrayBuffer> {\n        if (typeof code === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n        const apiPath = '/avatars/browsers/{code}'.replace('{code}', code);\n        const payload: Payload = {};\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n        if (typeof quality !== 'undefined') {\n            payload['quality'] = quality;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n            'arrayBuffer'\n        );\n    }\n    /**\n     * Get credit card icon\n     *\n     * The credit card endpoint will return you the icon of the credit card provider you need. Use width, height and quality arguments to change the output settings.\n\nWhen one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px.\n\n     *\n     * @param {CreditCard} code\n     * @param {number} width\n     * @param {number} height\n     * @param {number} quality\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     */\n    async getCreditCard(code: CreditCard, width?: number, height?: number, quality?: number): Promise<ArrayBuffer> {\n        if (typeof code === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n        const apiPath = '/avatars/credit-cards/{code}'.replace('{code}', code);\n        const payload: Payload = {};\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n        if (typeof quality !== 'undefined') {\n            payload['quality'] = quality;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n            'arrayBuffer'\n        );\n    }\n    /**\n     * Get favicon\n     *\n     * Use this endpoint to fetch the favorite icon (AKA favicon) of any remote website URL.\n\nThis endpoint does not follow HTTP redirects.\n     *\n     * @param {string} url\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     */\n    async getFavicon(url: string): Promise<ArrayBuffer> {\n        if (typeof url === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n        const apiPath = '/avatars/favicon';\n        const payload: Payload = {};\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n            'arrayBuffer'\n        );\n    }\n    /**\n     * Get country flag\n     *\n     * You can use this endpoint to show different country flags icons to your users. The code argument receives the 2 letter country code. Use width, height and quality arguments to change the output settings. Country codes follow the [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) standard.\n\nWhen one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px.\n\n     *\n     * @param {Flag} code\n     * @param {number} width\n     * @param {number} height\n     * @param {number} quality\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     */\n    async getFlag(code: Flag, width?: number, height?: number, quality?: number): Promise<ArrayBuffer> {\n        if (typeof code === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n        const apiPath = '/avatars/flags/{code}'.replace('{code}', code);\n        const payload: Payload = {};\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n        if (typeof quality !== 'undefined') {\n            payload['quality'] = quality;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n            'arrayBuffer'\n        );\n    }\n    /**\n     * Get image from URL\n     *\n     * Use this endpoint to fetch a remote image URL and crop it to any image size you want. This endpoint is very useful if you need to crop and display remote images in your app or in case you want to make sure a 3rd party image is properly served using a TLS protocol.\n\nWhen one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 400x400px.\n\nThis endpoint does not follow HTTP redirects.\n     *\n     * @param {string} url\n     * @param {number} width\n     * @param {number} height\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     */\n    async getImage(url: string, width?: number, height?: number): Promise<ArrayBuffer> {\n        if (typeof url === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n        const apiPath = '/avatars/image';\n        const payload: Payload = {};\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n            'arrayBuffer'\n        );\n    }\n    /**\n     * Get user initials\n     *\n     * Use this endpoint to show your user initials avatar icon on your website or app. By default, this route will try to print your logged-in user name or email initials. You can also overwrite the user name if you pass the &#039;name&#039; parameter. If no name is given and no user is logged, an empty avatar will be returned.\n\nYou can use the color and background params to change the avatar colors. By default, a random theme will be selected. The random theme will persist for the user&#039;s initials when reloading the same theme will always return for the same initials.\n\nWhen one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px.\n\n     *\n     * @param {string} name\n     * @param {number} width\n     * @param {number} height\n     * @param {string} background\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     */\n    async getInitials(name?: string, width?: number, height?: number, background?: string): Promise<ArrayBuffer> {\n        const apiPath = '/avatars/initials';\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n        if (typeof background !== 'undefined') {\n            payload['background'] = background;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n            'arrayBuffer'\n        );\n    }\n    /**\n     * Get QR code\n     *\n     * Converts a given plain text to a QR code image. You can use the query parameters to change the size and style of the resulting image.\n\n     *\n     * @param {string} text\n     * @param {number} size\n     * @param {number} margin\n     * @param {boolean} download\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     */\n    async getQR(text: string, size?: number, margin?: number, download?: boolean): Promise<ArrayBuffer> {\n        if (typeof text === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"text\"');\n        }\n        const apiPath = '/avatars/qr';\n        const payload: Payload = {};\n        if (typeof text !== 'undefined') {\n            payload['text'] = text;\n        }\n        if (typeof size !== 'undefined') {\n            payload['size'] = size;\n        }\n        if (typeof margin !== 'undefined') {\n            payload['margin'] = margin;\n        }\n        if (typeof download !== 'undefined') {\n            payload['download'] = download;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n            'arrayBuffer'\n        );\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1861, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/services/databases.ts"],"sourcesContent":["import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\nimport { RelationshipType } from '../enums/relationship-type';\nimport { RelationMutate } from '../enums/relation-mutate';\nimport { IndexType } from '../enums/index-type';\n\nexport class Databases {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * List databases\n     *\n     * Get a list of all databases from the current Appwrite project. You can use the search parameter to filter your results.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.DatabaseList>}\n     */\n    async list(queries?: string[], search?: string): Promise<Models.DatabaseList> {\n        const apiPath = '/databases';\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create database\n     *\n     * Create a new Database.\n\n     *\n     * @param {string} databaseId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Database>}\n     */\n    async create(databaseId: string, name: string, enabled?: boolean): Promise<Models.Database> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = '/databases';\n        const payload: Payload = {};\n        if (typeof databaseId !== 'undefined') {\n            payload['databaseId'] = databaseId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get database\n     *\n     * Get a database by its unique ID. This endpoint response returns a JSON object with the database metadata.\n     *\n     * @param {string} databaseId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Database>}\n     */\n    async get(databaseId: string): Promise<Models.Database> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        const apiPath = '/databases/{databaseId}'.replace('{databaseId}', databaseId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update database\n     *\n     * Update a database by its unique ID.\n     *\n     * @param {string} databaseId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Database>}\n     */\n    async update(databaseId: string, name: string, enabled?: boolean): Promise<Models.Database> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = '/databases/{databaseId}'.replace('{databaseId}', databaseId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete database\n     *\n     * Delete a database by its unique ID. Only API keys with with databases.write scope can delete a database.\n     *\n     * @param {string} databaseId\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async delete(databaseId: string): Promise<{}> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        const apiPath = '/databases/{databaseId}'.replace('{databaseId}', databaseId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List collections\n     *\n     * Get a list of all collections that belong to the provided databaseId. You can use the search parameter to filter your results.\n     *\n     * @param {string} databaseId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.CollectionList>}\n     */\n    async listCollections(databaseId: string, queries?: string[], search?: string): Promise<Models.CollectionList> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections'.replace('{databaseId}', databaseId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create collection\n     *\n     * Create a new Collection. Before using this route, you should create a new database resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} name\n     * @param {string[]} permissions\n     * @param {boolean} documentSecurity\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Collection>}\n     */\n    async createCollection(databaseId: string, collectionId: string, name: string, permissions?: string[], documentSecurity?: boolean, enabled?: boolean): Promise<Models.Collection> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections'.replace('{databaseId}', databaseId);\n        const payload: Payload = {};\n        if (typeof collectionId !== 'undefined') {\n            payload['collectionId'] = collectionId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n        if (typeof documentSecurity !== 'undefined') {\n            payload['documentSecurity'] = documentSecurity;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get collection\n     *\n     * Get a collection by its unique ID. This endpoint response returns a JSON object with the collection metadata.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Collection>}\n     */\n    async getCollection(databaseId: string, collectionId: string): Promise<Models.Collection> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update collection\n     *\n     * Update a collection by its unique ID.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} name\n     * @param {string[]} permissions\n     * @param {boolean} documentSecurity\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Collection>}\n     */\n    async updateCollection(databaseId: string, collectionId: string, name: string, permissions?: string[], documentSecurity?: boolean, enabled?: boolean): Promise<Models.Collection> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n        if (typeof documentSecurity !== 'undefined') {\n            payload['documentSecurity'] = documentSecurity;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete collection\n     *\n     * Delete a collection by its unique ID. Only users with write permissions have access to delete this resource.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async deleteCollection(databaseId: string, collectionId: string): Promise<{}> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List attributes\n     *\n     * List attributes in the collection.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeList>}\n     */\n    async listAttributes(databaseId: string, collectionId: string, queries?: string[]): Promise<Models.AttributeList> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create boolean attribute\n     *\n     * Create a boolean attribute.\n\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {boolean} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeBoolean>}\n     */\n    async createBooleanAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: boolean, array?: boolean): Promise<Models.AttributeBoolean> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/boolean'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update boolean attribute\n     *\n     * Update a boolean attribute. Changing the `default` value will not update already existing documents.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {boolean} xdefault\n     * @param {string} newKey\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeBoolean>}\n     */\n    async updateBooleanAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: boolean, newKey?: string): Promise<Models.AttributeBoolean> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/boolean/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create datetime attribute\n     *\n     * Create a date time attribute according to the ISO 8601 standard.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeDatetime>}\n     */\n    async createDatetimeAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, array?: boolean): Promise<Models.AttributeDatetime> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/datetime'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update dateTime attribute\n     *\n     * Update a date time attribute. Changing the `default` value will not update already existing documents.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {string} newKey\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeDatetime>}\n     */\n    async updateDatetimeAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, newKey?: string): Promise<Models.AttributeDatetime> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/datetime/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create email attribute\n     *\n     * Create an email attribute.\n\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeEmail>}\n     */\n    async createEmailAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, array?: boolean): Promise<Models.AttributeEmail> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/email'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update email attribute\n     *\n     * Update an email attribute. Changing the `default` value will not update already existing documents.\n\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {string} newKey\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeEmail>}\n     */\n    async updateEmailAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, newKey?: string): Promise<Models.AttributeEmail> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/email/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create enum attribute\n     *\n     * Create an enumeration attribute. The `elements` param acts as a white-list of accepted values for this attribute. \n\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {string[]} elements\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeEnum>}\n     */\n    async createEnumAttribute(databaseId: string, collectionId: string, key: string, elements: string[], required: boolean, xdefault?: string, array?: boolean): Promise<Models.AttributeEnum> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof elements === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"elements\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/enum'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof elements !== 'undefined') {\n            payload['elements'] = elements;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update enum attribute\n     *\n     * Update an enum attribute. Changing the `default` value will not update already existing documents.\n\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {string[]} elements\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {string} newKey\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeEnum>}\n     */\n    async updateEnumAttribute(databaseId: string, collectionId: string, key: string, elements: string[], required: boolean, xdefault?: string, newKey?: string): Promise<Models.AttributeEnum> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof elements === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"elements\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/enum/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof elements !== 'undefined') {\n            payload['elements'] = elements;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create float attribute\n     *\n     * Create a float attribute. Optionally, minimum and maximum values can be provided.\n\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {number} min\n     * @param {number} max\n     * @param {number} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeFloat>}\n     */\n    async createFloatAttribute(databaseId: string, collectionId: string, key: string, required: boolean, min?: number, max?: number, xdefault?: number, array?: boolean): Promise<Models.AttributeFloat> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/float'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof min !== 'undefined') {\n            payload['min'] = min;\n        }\n        if (typeof max !== 'undefined') {\n            payload['max'] = max;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update float attribute\n     *\n     * Update a float attribute. Changing the `default` value will not update already existing documents.\n\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {number} min\n     * @param {number} max\n     * @param {number} xdefault\n     * @param {string} newKey\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeFloat>}\n     */\n    async updateFloatAttribute(databaseId: string, collectionId: string, key: string, required: boolean, min: number, max: number, xdefault?: number, newKey?: string): Promise<Models.AttributeFloat> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof min === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"min\"');\n        }\n        if (typeof max === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"max\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/float/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof min !== 'undefined') {\n            payload['min'] = min;\n        }\n        if (typeof max !== 'undefined') {\n            payload['max'] = max;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create integer attribute\n     *\n     * Create an integer attribute. Optionally, minimum and maximum values can be provided.\n\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {number} min\n     * @param {number} max\n     * @param {number} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeInteger>}\n     */\n    async createIntegerAttribute(databaseId: string, collectionId: string, key: string, required: boolean, min?: number, max?: number, xdefault?: number, array?: boolean): Promise<Models.AttributeInteger> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/integer'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof min !== 'undefined') {\n            payload['min'] = min;\n        }\n        if (typeof max !== 'undefined') {\n            payload['max'] = max;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update integer attribute\n     *\n     * Update an integer attribute. Changing the `default` value will not update already existing documents.\n\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {number} min\n     * @param {number} max\n     * @param {number} xdefault\n     * @param {string} newKey\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeInteger>}\n     */\n    async updateIntegerAttribute(databaseId: string, collectionId: string, key: string, required: boolean, min: number, max: number, xdefault?: number, newKey?: string): Promise<Models.AttributeInteger> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof min === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"min\"');\n        }\n        if (typeof max === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"max\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/integer/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof min !== 'undefined') {\n            payload['min'] = min;\n        }\n        if (typeof max !== 'undefined') {\n            payload['max'] = max;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create IP address attribute\n     *\n     * Create IP address attribute.\n\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeIp>}\n     */\n    async createIpAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, array?: boolean): Promise<Models.AttributeIp> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/ip'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update IP address attribute\n     *\n     * Update an ip attribute. Changing the `default` value will not update already existing documents.\n\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {string} newKey\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeIp>}\n     */\n    async updateIpAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, newKey?: string): Promise<Models.AttributeIp> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/ip/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create relationship attribute\n     *\n     * Create relationship attribute. [Learn more about relationship attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes).\n\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} relatedCollectionId\n     * @param {RelationshipType} type\n     * @param {boolean} twoWay\n     * @param {string} key\n     * @param {string} twoWayKey\n     * @param {RelationMutate} onDelete\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeRelationship>}\n     */\n    async createRelationshipAttribute(databaseId: string, collectionId: string, relatedCollectionId: string, type: RelationshipType, twoWay?: boolean, key?: string, twoWayKey?: string, onDelete?: RelationMutate): Promise<Models.AttributeRelationship> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof relatedCollectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"relatedCollectionId\"');\n        }\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/relationship'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof relatedCollectionId !== 'undefined') {\n            payload['relatedCollectionId'] = relatedCollectionId;\n        }\n        if (typeof type !== 'undefined') {\n            payload['type'] = type;\n        }\n        if (typeof twoWay !== 'undefined') {\n            payload['twoWay'] = twoWay;\n        }\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof twoWayKey !== 'undefined') {\n            payload['twoWayKey'] = twoWayKey;\n        }\n        if (typeof onDelete !== 'undefined') {\n            payload['onDelete'] = onDelete;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create string attribute\n     *\n     * Create a string attribute.\n\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {number} size\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {boolean} array\n     * @param {boolean} encrypt\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeString>}\n     */\n    async createStringAttribute(databaseId: string, collectionId: string, key: string, size: number, required: boolean, xdefault?: string, array?: boolean, encrypt?: boolean): Promise<Models.AttributeString> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof size === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"size\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/string'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof size !== 'undefined') {\n            payload['size'] = size;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        if (typeof encrypt !== 'undefined') {\n            payload['encrypt'] = encrypt;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update string attribute\n     *\n     * Update a string attribute. Changing the `default` value will not update already existing documents.\n\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {number} size\n     * @param {string} newKey\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeString>}\n     */\n    async updateStringAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, size?: number, newKey?: string): Promise<Models.AttributeString> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/string/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof size !== 'undefined') {\n            payload['size'] = size;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create URL attribute\n     *\n     * Create a URL attribute.\n\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeUrl>}\n     */\n    async createUrlAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, array?: boolean): Promise<Models.AttributeUrl> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/url'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update URL attribute\n     *\n     * Update an url attribute. Changing the `default` value will not update already existing documents.\n\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {string} newKey\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeUrl>}\n     */\n    async updateUrlAttribute(databaseId: string, collectionId: string, key: string, required: boolean, xdefault?: string, newKey?: string): Promise<Models.AttributeUrl> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/url/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get attribute\n     *\n     * Get attribute by ID.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async getAttribute(databaseId: string, collectionId: string, key: string): Promise<{}> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete attribute\n     *\n     * Deletes an attribute.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async deleteAttribute(databaseId: string, collectionId: string, key: string): Promise<{}> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update relationship attribute\n     *\n     * Update relationship attribute. [Learn more about relationship attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes).\n\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {RelationMutate} onDelete\n     * @param {string} newKey\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.AttributeRelationship>}\n     */\n    async updateRelationshipAttribute(databaseId: string, collectionId: string, key: string, onDelete?: RelationMutate, newKey?: string): Promise<Models.AttributeRelationship> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/{key}/relationship'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        if (typeof onDelete !== 'undefined') {\n            payload['onDelete'] = onDelete;\n        }\n        if (typeof newKey !== 'undefined') {\n            payload['newKey'] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List documents\n     *\n     * Get a list of all the user&#039;s documents in a given collection. You can use the query params to filter your results.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.DocumentList<Document>>}\n     */\n    async listDocuments<Document extends Models.Document>(databaseId: string, collectionId: string, queries?: string[]): Promise<Models.DocumentList<Document>> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create document\n     *\n     * Create a new Document. Before using this route, you should create a new collection resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} documentId\n     * @param {Omit<Document, keyof Models.Document>} data\n     * @param {string[]} permissions\n     * @throws {AppwriteException}\n     * @returns {Promise<Document>}\n     */\n    async createDocument<Document extends Models.Document>(databaseId: string, collectionId: string, documentId: string, data: Omit<Document, keyof Models.Document>, permissions?: string[]): Promise<Document> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n        if (typeof data === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"data\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof documentId !== 'undefined') {\n            payload['documentId'] = documentId;\n        }\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get document\n     *\n     * Get a document by its unique ID. This endpoint response returns a JSON object with the document data.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} documentId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise<Document>}\n     */\n    async getDocument<Document extends Models.Document>(databaseId: string, collectionId: string, documentId: string, queries?: string[]): Promise<Document> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{documentId}', documentId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update document\n     *\n     * Update a document by its unique ID. Using the patch method you can pass only specific fields that will get updated.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} documentId\n     * @param {Partial<Omit<Document, keyof Models.Document>>} data\n     * @param {string[]} permissions\n     * @throws {AppwriteException}\n     * @returns {Promise<Document>}\n     */\n    async updateDocument<Document extends Models.Document>(databaseId: string, collectionId: string, documentId: string, data?: Partial<Omit<Document, keyof Models.Document>>, permissions?: string[]): Promise<Document> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{documentId}', documentId);\n        const payload: Payload = {};\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete document\n     *\n     * Delete a document by its unique ID.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} documentId\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async deleteDocument(databaseId: string, collectionId: string, documentId: string): Promise<{}> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{documentId}', documentId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List indexes\n     *\n     * List indexes in the collection.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.IndexList>}\n     */\n    async listIndexes(databaseId: string, collectionId: string, queries?: string[]): Promise<Models.IndexList> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/indexes'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create index\n     *\n     * Creates an index on the attributes listed. Your index should include all the attributes you will query in a single request.\nAttributes can be `key`, `fulltext`, and `unique`.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {IndexType} type\n     * @param {string[]} attributes\n     * @param {string[]} orders\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Index>}\n     */\n    async createIndex(databaseId: string, collectionId: string, key: string, type: IndexType, attributes: string[], orders?: string[]): Promise<Models.Index> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n        if (typeof attributes === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"attributes\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/indexes'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof type !== 'undefined') {\n            payload['type'] = type;\n        }\n        if (typeof attributes !== 'undefined') {\n            payload['attributes'] = attributes;\n        }\n        if (typeof orders !== 'undefined') {\n            payload['orders'] = orders;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get index\n     *\n     * Get index by ID.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Index>}\n     */\n    async getIndex(databaseId: string, collectionId: string, key: string): Promise<Models.Index> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/indexes/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete index\n     *\n     * Delete an index.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async deleteIndex(databaseId: string, collectionId: string, key: string): Promise<{}> {\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/indexes/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3569, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/services/functions.ts"],"sourcesContent":["import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\nimport { Runtime } from '../enums/runtime';\nimport { ExecutionMethod } from '../enums/execution-method';\n\nexport class Functions {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * List functions\n     *\n     * Get a list of all the project&#039;s functions. You can use the query params to filter your results.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.FunctionList>}\n     */\n    async list(queries?: string[], search?: string): Promise<Models.FunctionList> {\n        const apiPath = '/functions';\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create function\n     *\n     * Create a new function. You can pass a list of [permissions](https://appwrite.io/docs/permissions) to allow different project users or team with access to execute the function using the client API.\n     *\n     * @param {string} functionId\n     * @param {string} name\n     * @param {Runtime} runtime\n     * @param {string[]} execute\n     * @param {string[]} events\n     * @param {string} schedule\n     * @param {number} timeout\n     * @param {boolean} enabled\n     * @param {boolean} logging\n     * @param {string} entrypoint\n     * @param {string} commands\n     * @param {string[]} scopes\n     * @param {string} installationId\n     * @param {string} providerRepositoryId\n     * @param {string} providerBranch\n     * @param {boolean} providerSilentMode\n     * @param {string} providerRootDirectory\n     * @param {string} templateRepository\n     * @param {string} templateOwner\n     * @param {string} templateRootDirectory\n     * @param {string} templateVersion\n     * @param {string} specification\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Function>}\n     */\n    async create(functionId: string, name: string, runtime: Runtime, execute?: string[], events?: string[], schedule?: string, timeout?: number, enabled?: boolean, logging?: boolean, entrypoint?: string, commands?: string, scopes?: string[], installationId?: string, providerRepositoryId?: string, providerBranch?: string, providerSilentMode?: boolean, providerRootDirectory?: string, templateRepository?: string, templateOwner?: string, templateRootDirectory?: string, templateVersion?: string, specification?: string): Promise<Models.Function> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        if (typeof runtime === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"runtime\"');\n        }\n        const apiPath = '/functions';\n        const payload: Payload = {};\n        if (typeof functionId !== 'undefined') {\n            payload['functionId'] = functionId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof runtime !== 'undefined') {\n            payload['runtime'] = runtime;\n        }\n        if (typeof execute !== 'undefined') {\n            payload['execute'] = execute;\n        }\n        if (typeof events !== 'undefined') {\n            payload['events'] = events;\n        }\n        if (typeof schedule !== 'undefined') {\n            payload['schedule'] = schedule;\n        }\n        if (typeof timeout !== 'undefined') {\n            payload['timeout'] = timeout;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof logging !== 'undefined') {\n            payload['logging'] = logging;\n        }\n        if (typeof entrypoint !== 'undefined') {\n            payload['entrypoint'] = entrypoint;\n        }\n        if (typeof commands !== 'undefined') {\n            payload['commands'] = commands;\n        }\n        if (typeof scopes !== 'undefined') {\n            payload['scopes'] = scopes;\n        }\n        if (typeof installationId !== 'undefined') {\n            payload['installationId'] = installationId;\n        }\n        if (typeof providerRepositoryId !== 'undefined') {\n            payload['providerRepositoryId'] = providerRepositoryId;\n        }\n        if (typeof providerBranch !== 'undefined') {\n            payload['providerBranch'] = providerBranch;\n        }\n        if (typeof providerSilentMode !== 'undefined') {\n            payload['providerSilentMode'] = providerSilentMode;\n        }\n        if (typeof providerRootDirectory !== 'undefined') {\n            payload['providerRootDirectory'] = providerRootDirectory;\n        }\n        if (typeof templateRepository !== 'undefined') {\n            payload['templateRepository'] = templateRepository;\n        }\n        if (typeof templateOwner !== 'undefined') {\n            payload['templateOwner'] = templateOwner;\n        }\n        if (typeof templateRootDirectory !== 'undefined') {\n            payload['templateRootDirectory'] = templateRootDirectory;\n        }\n        if (typeof templateVersion !== 'undefined') {\n            payload['templateVersion'] = templateVersion;\n        }\n        if (typeof specification !== 'undefined') {\n            payload['specification'] = specification;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List runtimes\n     *\n     * Get a list of all runtimes that are currently active on your instance.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.RuntimeList>}\n     */\n    async listRuntimes(): Promise<Models.RuntimeList> {\n        const apiPath = '/functions/runtimes';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List available function runtime specifications\n     *\n     * List allowed function specifications for this instance.\n\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.SpecificationList>}\n     */\n    async listSpecifications(): Promise<Models.SpecificationList> {\n        const apiPath = '/functions/specifications';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get function\n     *\n     * Get a function by its unique ID.\n     *\n     * @param {string} functionId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Function>}\n     */\n    async get(functionId: string): Promise<Models.Function> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        const apiPath = '/functions/{functionId}'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update function\n     *\n     * Update function by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} name\n     * @param {Runtime} runtime\n     * @param {string[]} execute\n     * @param {string[]} events\n     * @param {string} schedule\n     * @param {number} timeout\n     * @param {boolean} enabled\n     * @param {boolean} logging\n     * @param {string} entrypoint\n     * @param {string} commands\n     * @param {string[]} scopes\n     * @param {string} installationId\n     * @param {string} providerRepositoryId\n     * @param {string} providerBranch\n     * @param {boolean} providerSilentMode\n     * @param {string} providerRootDirectory\n     * @param {string} specification\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Function>}\n     */\n    async update(functionId: string, name: string, runtime?: Runtime, execute?: string[], events?: string[], schedule?: string, timeout?: number, enabled?: boolean, logging?: boolean, entrypoint?: string, commands?: string, scopes?: string[], installationId?: string, providerRepositoryId?: string, providerBranch?: string, providerSilentMode?: boolean, providerRootDirectory?: string, specification?: string): Promise<Models.Function> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = '/functions/{functionId}'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof runtime !== 'undefined') {\n            payload['runtime'] = runtime;\n        }\n        if (typeof execute !== 'undefined') {\n            payload['execute'] = execute;\n        }\n        if (typeof events !== 'undefined') {\n            payload['events'] = events;\n        }\n        if (typeof schedule !== 'undefined') {\n            payload['schedule'] = schedule;\n        }\n        if (typeof timeout !== 'undefined') {\n            payload['timeout'] = timeout;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof logging !== 'undefined') {\n            payload['logging'] = logging;\n        }\n        if (typeof entrypoint !== 'undefined') {\n            payload['entrypoint'] = entrypoint;\n        }\n        if (typeof commands !== 'undefined') {\n            payload['commands'] = commands;\n        }\n        if (typeof scopes !== 'undefined') {\n            payload['scopes'] = scopes;\n        }\n        if (typeof installationId !== 'undefined') {\n            payload['installationId'] = installationId;\n        }\n        if (typeof providerRepositoryId !== 'undefined') {\n            payload['providerRepositoryId'] = providerRepositoryId;\n        }\n        if (typeof providerBranch !== 'undefined') {\n            payload['providerBranch'] = providerBranch;\n        }\n        if (typeof providerSilentMode !== 'undefined') {\n            payload['providerSilentMode'] = providerSilentMode;\n        }\n        if (typeof providerRootDirectory !== 'undefined') {\n            payload['providerRootDirectory'] = providerRootDirectory;\n        }\n        if (typeof specification !== 'undefined') {\n            payload['specification'] = specification;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete function\n     *\n     * Delete a function by its unique ID.\n     *\n     * @param {string} functionId\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async delete(functionId: string): Promise<{}> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        const apiPath = '/functions/{functionId}'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List deployments\n     *\n     * Get a list of all the project&#039;s code deployments. You can use the query params to filter your results.\n     *\n     * @param {string} functionId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.DeploymentList>}\n     */\n    async listDeployments(functionId: string, queries?: string[], search?: string): Promise<Models.DeploymentList> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        const apiPath = '/functions/{functionId}/deployments'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create deployment\n     *\n     * Create a new function code deployment. Use this endpoint to upload a new version of your code function. To execute your newly uploaded code, you&#039;ll need to update the function&#039;s deployment to use your new deployment UID.\n\nThis endpoint accepts a tar.gz file compressed with your code. Make sure to include any dependencies your code has within the compressed file. You can learn more about code packaging in the [Appwrite Cloud Functions tutorial](https://appwrite.io/docs/functions).\n\nUse the &quot;command&quot; param to set the entrypoint used to execute your code.\n     *\n     * @param {string} functionId\n     * @param {File} code\n     * @param {boolean} activate\n     * @param {string} entrypoint\n     * @param {string} commands\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     */\n    async createDeployment(functionId: string, code: File, activate: boolean, entrypoint?: string, commands?: string, onProgress = (progress: UploadProgress) => {}): Promise<Models.Deployment> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof code === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n        if (typeof activate === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"activate\"');\n        }\n        const apiPath = '/functions/{functionId}/deployments'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n        if (typeof entrypoint !== 'undefined') {\n            payload['entrypoint'] = entrypoint;\n        }\n        if (typeof commands !== 'undefined') {\n            payload['commands'] = commands;\n        }\n        if (typeof code !== 'undefined') {\n            payload['code'] = code;\n        }\n        if (typeof activate !== 'undefined') {\n            payload['activate'] = activate;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'multipart/form-data',\n        }\n\n        return await this.client.chunkedUpload(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n            onProgress\n        );\n    }\n    /**\n     * Get deployment\n     *\n     * Get a code deployment by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} deploymentId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Deployment>}\n     */\n    async getDeployment(functionId: string, deploymentId: string): Promise<Models.Deployment> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n        const apiPath = '/functions/{functionId}/deployments/{deploymentId}'.replace('{functionId}', functionId).replace('{deploymentId}', deploymentId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update deployment\n     *\n     * Update the function code deployment ID using the unique function ID. Use this endpoint to switch the code deployment that should be executed by the execution endpoint.\n     *\n     * @param {string} functionId\n     * @param {string} deploymentId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Function>}\n     */\n    async updateDeployment(functionId: string, deploymentId: string): Promise<Models.Function> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n        const apiPath = '/functions/{functionId}/deployments/{deploymentId}'.replace('{functionId}', functionId).replace('{deploymentId}', deploymentId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete deployment\n     *\n     * Delete a code deployment by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} deploymentId\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async deleteDeployment(functionId: string, deploymentId: string): Promise<{}> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n        const apiPath = '/functions/{functionId}/deployments/{deploymentId}'.replace('{functionId}', functionId).replace('{deploymentId}', deploymentId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Rebuild deployment\n     *\n     *\n     * @param {string} functionId\n     * @param {string} deploymentId\n     * @param {string} buildId\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async createBuild(functionId: string, deploymentId: string, buildId?: string): Promise<{}> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n        const apiPath = '/functions/{functionId}/deployments/{deploymentId}/build'.replace('{functionId}', functionId).replace('{deploymentId}', deploymentId);\n        const payload: Payload = {};\n        if (typeof buildId !== 'undefined') {\n            payload['buildId'] = buildId;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Cancel deployment\n     *\n     *\n     * @param {string} functionId\n     * @param {string} deploymentId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Build>}\n     */\n    async updateDeploymentBuild(functionId: string, deploymentId: string): Promise<Models.Build> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n        const apiPath = '/functions/{functionId}/deployments/{deploymentId}/build'.replace('{functionId}', functionId).replace('{deploymentId}', deploymentId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Download deployment\n     *\n     * Get a Deployment&#039;s contents by its unique ID. This endpoint supports range requests for partial or streaming file download.\n     *\n     * @param {string} functionId\n     * @param {string} deploymentId\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     */\n    async getDeploymentDownload(functionId: string, deploymentId: string): Promise<ArrayBuffer> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n        const apiPath = '/functions/{functionId}/deployments/{deploymentId}/download'.replace('{functionId}', functionId).replace('{deploymentId}', deploymentId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n            'arrayBuffer'\n        );\n    }\n    /**\n     * List executions\n     *\n     * Get a list of all the current user function execution logs. You can use the query params to filter your results.\n     *\n     * @param {string} functionId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ExecutionList>}\n     */\n    async listExecutions(functionId: string, queries?: string[], search?: string): Promise<Models.ExecutionList> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        const apiPath = '/functions/{functionId}/executions'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create execution\n     *\n     * Trigger a function execution. The returned object will return you the current execution status. You can ping the `Get Execution` endpoint to get updates on the current execution status. Once this endpoint is called, your function execution process will start asynchronously.\n     *\n     * @param {string} functionId\n     * @param {string} body\n     * @param {boolean} async\n     * @param {string} xpath\n     * @param {ExecutionMethod} method\n     * @param {object} headers\n     * @param {string} scheduledAt\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Execution>}\n     */\n    async createExecution(functionId: string, body?: string, async?: boolean, xpath?: string, method?: ExecutionMethod, headers?: object, scheduledAt?: string): Promise<Models.Execution> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        const apiPath = '/functions/{functionId}/executions'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n        if (typeof body !== 'undefined') {\n            payload['body'] = body;\n        }\n        if (typeof async !== 'undefined') {\n            payload['async'] = async;\n        }\n        if (typeof xpath !== 'undefined') {\n            payload['path'] = xpath;\n        }\n        if (typeof method !== 'undefined') {\n            payload['method'] = method;\n        }\n        if (typeof headers !== 'undefined') {\n            payload['headers'] = headers;\n        }\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get execution\n     *\n     * Get a function execution log by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} executionId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Execution>}\n     */\n    async getExecution(functionId: string, executionId: string): Promise<Models.Execution> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof executionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"executionId\"');\n        }\n        const apiPath = '/functions/{functionId}/executions/{executionId}'.replace('{functionId}', functionId).replace('{executionId}', executionId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete execution\n     *\n     * Delete a function execution by its unique ID.\n\n     *\n     * @param {string} functionId\n     * @param {string} executionId\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async deleteExecution(functionId: string, executionId: string): Promise<{}> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof executionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"executionId\"');\n        }\n        const apiPath = '/functions/{functionId}/executions/{executionId}'.replace('{functionId}', functionId).replace('{executionId}', executionId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List variables\n     *\n     * Get a list of all variables of a specific function.\n     *\n     * @param {string} functionId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.VariableList>}\n     */\n    async listVariables(functionId: string): Promise<Models.VariableList> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        const apiPath = '/functions/{functionId}/variables'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create variable\n     *\n     * Create a new function environment variable. These variables can be accessed in the function at runtime as environment variables.\n     *\n     * @param {string} functionId\n     * @param {string} key\n     * @param {string} value\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Variable>}\n     */\n    async createVariable(functionId: string, key: string, value: string): Promise<Models.Variable> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof value === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"value\"');\n        }\n        const apiPath = '/functions/{functionId}/variables'.replace('{functionId}', functionId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof value !== 'undefined') {\n            payload['value'] = value;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get variable\n     *\n     * Get a variable by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} variableId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Variable>}\n     */\n    async getVariable(functionId: string, variableId: string): Promise<Models.Variable> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof variableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"variableId\"');\n        }\n        const apiPath = '/functions/{functionId}/variables/{variableId}'.replace('{functionId}', functionId).replace('{variableId}', variableId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update variable\n     *\n     * Update variable by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} variableId\n     * @param {string} key\n     * @param {string} value\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Variable>}\n     */\n    async updateVariable(functionId: string, variableId: string, key: string, value?: string): Promise<Models.Variable> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof variableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"variableId\"');\n        }\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n        const apiPath = '/functions/{functionId}/variables/{variableId}'.replace('{functionId}', functionId).replace('{variableId}', variableId);\n        const payload: Payload = {};\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n        if (typeof value !== 'undefined') {\n            payload['value'] = value;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete variable\n     *\n     * Delete a variable by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} variableId\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async deleteVariable(functionId: string, variableId: string): Promise<{}> {\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof variableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"variableId\"');\n        }\n        const apiPath = '/functions/{functionId}/variables/{variableId}'.replace('{functionId}', functionId).replace('{variableId}', variableId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4369, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/services/graphql.ts"],"sourcesContent":["import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\n\nexport class Graphql {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * GraphQL endpoint\n     *\n     * Execute a GraphQL mutation.\n     *\n     * @param {object} query\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async query(query: object): Promise<{}> {\n        if (typeof query === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"query\"');\n        }\n        const apiPath = '/graphql';\n        const payload: Payload = {};\n        if (typeof query !== 'undefined') {\n            payload['query'] = query;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'x-sdk-graphql': 'true',\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * GraphQL endpoint\n     *\n     * Execute a GraphQL mutation.\n     *\n     * @param {object} query\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async mutation(query: object): Promise<{}> {\n        if (typeof query === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"query\"');\n        }\n        const apiPath = '/graphql/mutation';\n        const payload: Payload = {};\n        if (typeof query !== 'undefined') {\n            payload['query'] = query;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'x-sdk-graphql': 'true',\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n}\n"],"names":[],"mappings":";;;;;;AAGO,IAAM,UAAN,MAAc,MAAA;AAAA,EAGjB,EAAA,UAAY,QAAgB;IACxB,OAAK,KAAA,IAAS,EAAA,CAAA;QAClB,IAAA,CAAA,MAAA,GAAA;IAAA;IAAA;;;;;;;;GAWA,GACI,EADE,IACE,EADI,IACJ,CAAO,EADyB,EACzB,EAAA,IAAU,aAAa;QAC9B,IAAA,IAAM,GAAA,CAAI,SAAA,SAAkB,IAAA,iCAAqC;YACrE,MAAA,IAAA,mKAAA,CAAA,oBAAA,CAAA;QACA,MAAM,UAAU;QAChB,MAAM,UAAmB,CAAC;QAC1B,IAAI,EAAA,KAAO,KAAA,CAAA,IAAU,aAAa;QAC9B,IAAA,MAAQ,CAAA,MAAO,IAAI,aAAA;YACvB,OAAA,CAAA,QAAA,GAAA;QACA,MAAM,MAAM,IAAI,IAAI,KAAK,OAAO,OAAO,WAAW,OAAO;QAEzD,MAAM,MAAA,IAAA,GAA2C,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,QAAA,GAAA;QAAA,EAC7C,IAAA,aAAiB;YACjB,gBAAgB,CAAA;YACpB,gBAAA;QAEA,OAAO,MAAM,KAAK,OAAO;QAAA,EACrB,KAAA,MAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CACA,QACA,KACA,YACJ;IACJ;IAAA;;;;;;;;GAUA,GACI,EADE,IACE,KADO,EACA,EAAA,GAD4B,EAC5B,EAAA,CAAU,aAAa;QAC9B,IAAA,IAAM,GAAA,CAAI,SAAA,SAAkB,IAAA,iCAAqC;YACrE,MAAA,IAAA,mKAAA,CAAA,oBAAA,CAAA;QACA,MAAM,UAAU;QAChB,MAAM,UAAmB,CAAC;QAC1B,IAAI,EAAA,KAAO,KAAA,CAAA,IAAU,aAAa;QAC9B,IAAA,MAAQ,CAAA,MAAO,IAAI,aAAA;YACvB,OAAA,CAAA,QAAA,GAAA;QACA,MAAM,MAAM,IAAI,IAAI,KAAK,OAAO,OAAO,WAAW,OAAO;QAEzD,MAAM,MAAA,IAAA,GAA2C,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,QAAA,GAAA;QAAA,EAC7C,IAAA,aAAiB;YACjB,gBAAgB,CAAA;YACpB,gBAAA;QAEA,OAAO,MAAM,KAAK,OAAO;QAAA,EACrB,KAAA,MAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CACA,QACA,KACA,YACJ;IAER","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4438, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/services/health.ts"],"sourcesContent":["import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\nimport { Name } from '../enums/name';\n\nexport class Health {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * Get HTTP\n     *\n     * Check the Appwrite HTTP server is up and responsive.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthStatus>}\n     */\n    async get(): Promise<Models.HealthStatus> {\n        const apiPath = '/health';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get antivirus\n     *\n     * Check the Appwrite Antivirus server is up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthAntivirus>}\n     */\n    async getAntivirus(): Promise<Models.HealthAntivirus> {\n        const apiPath = '/health/anti-virus';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get cache\n     *\n     * Check the Appwrite in-memory cache servers are up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthStatus>}\n     */\n    async getCache(): Promise<Models.HealthStatus> {\n        const apiPath = '/health/cache';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get the SSL certificate for a domain\n     *\n     * Get the SSL certificate for a domain\n     *\n     * @param {string} domain\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthCertificate>}\n     */\n    async getCertificate(domain?: string): Promise<Models.HealthCertificate> {\n        const apiPath = '/health/certificate';\n        const payload: Payload = {};\n        if (typeof domain !== 'undefined') {\n            payload['domain'] = domain;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get DB\n     *\n     * Check the Appwrite database servers are up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthStatus>}\n     */\n    async getDB(): Promise<Models.HealthStatus> {\n        const apiPath = '/health/db';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get pubsub\n     *\n     * Check the Appwrite pub-sub servers are up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthStatus>}\n     */\n    async getPubSub(): Promise<Models.HealthStatus> {\n        const apiPath = '/health/pubsub';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get queue\n     *\n     * Check the Appwrite queue messaging servers are up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthStatus>}\n     */\n    async getQueue(): Promise<Models.HealthStatus> {\n        const apiPath = '/health/queue';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get builds queue\n     *\n     * Get the number of builds that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    async getQueueBuilds(threshold?: number): Promise<Models.HealthQueue> {\n        const apiPath = '/health/queue/builds';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get certificates queue\n     *\n     * Get the number of certificates that are waiting to be issued against [Letsencrypt](https://letsencrypt.org/) in the Appwrite internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    async getQueueCertificates(threshold?: number): Promise<Models.HealthQueue> {\n        const apiPath = '/health/queue/certificates';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get databases queue\n     *\n     * Get the number of database changes that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {string} name\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    async getQueueDatabases(name?: string, threshold?: number): Promise<Models.HealthQueue> {\n        const apiPath = '/health/queue/databases';\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get deletes queue\n     *\n     * Get the number of background destructive changes that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    async getQueueDeletes(threshold?: number): Promise<Models.HealthQueue> {\n        const apiPath = '/health/queue/deletes';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get number of failed queue jobs\n     *\n     * Returns the amount of failed jobs in a given queue.\n\n     *\n     * @param {Name} name\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    async getFailedJobs(name: Name, threshold?: number): Promise<Models.HealthQueue> {\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = '/health/queue/failed/{name}'.replace('{name}', name);\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get functions queue\n     *\n     * Get the number of function executions that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    async getQueueFunctions(threshold?: number): Promise<Models.HealthQueue> {\n        const apiPath = '/health/queue/functions';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get logs queue\n     *\n     * Get the number of logs that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    async getQueueLogs(threshold?: number): Promise<Models.HealthQueue> {\n        const apiPath = '/health/queue/logs';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get mails queue\n     *\n     * Get the number of mails that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    async getQueueMails(threshold?: number): Promise<Models.HealthQueue> {\n        const apiPath = '/health/queue/mails';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get messaging queue\n     *\n     * Get the number of messages that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    async getQueueMessaging(threshold?: number): Promise<Models.HealthQueue> {\n        const apiPath = '/health/queue/messaging';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get migrations queue\n     *\n     * Get the number of migrations that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    async getQueueMigrations(threshold?: number): Promise<Models.HealthQueue> {\n        const apiPath = '/health/queue/migrations';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get usage queue\n     *\n     * Get the number of metrics that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    async getQueueUsage(threshold?: number): Promise<Models.HealthQueue> {\n        const apiPath = '/health/queue/usage';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get usage dump queue\n     *\n     * Get the number of projects containing metrics that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    async getQueueUsageDump(threshold?: number): Promise<Models.HealthQueue> {\n        const apiPath = '/health/queue/usage-dump';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get webhooks queue\n     *\n     * Get the number of webhooks that are waiting to be processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthQueue>}\n     */\n    async getQueueWebhooks(threshold?: number): Promise<Models.HealthQueue> {\n        const apiPath = '/health/queue/webhooks';\n        const payload: Payload = {};\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get storage\n     *\n     * Check the Appwrite storage device is up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthStatus>}\n     */\n    async getStorage(): Promise<Models.HealthStatus> {\n        const apiPath = '/health/storage';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get local storage\n     *\n     * Check the Appwrite local storage device is up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthStatus>}\n     */\n    async getStorageLocal(): Promise<Models.HealthStatus> {\n        const apiPath = '/health/storage/local';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get time\n     *\n     * Check the Appwrite server time is synced with Google remote NTP server. We use this technology to smoothly handle leap seconds with no disruptive events. The [Network Time Protocol](https://en.wikipedia.org/wiki/Network_Time_Protocol) (NTP) is used by hundreds of millions of computers and devices to synchronize their clocks over the Internet. If your computer sets its own clock, it likely uses NTP.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.HealthTime>}\n     */\n    async getTime(): Promise<Models.HealthTime> {\n        const apiPath = '/health/time';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4892, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/services/locale.ts"],"sourcesContent":["import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\n\nexport class Locale {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * Get user locale\n     *\n     * Get the current user location based on IP. Returns an object with user country code, country name, continent name, continent code, ip address and suggested currency. You can use the locale header to get the data in a supported language.\n\n([IP Geolocation by DB-IP](https://db-ip.com))\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Locale>}\n     */\n    async get(): Promise<Models.Locale> {\n        const apiPath = '/locale';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List locale codes\n     *\n     * List of all locale codes in [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.LocaleCodeList>}\n     */\n    async listCodes(): Promise<Models.LocaleCodeList> {\n        const apiPath = '/locale/codes';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List continents\n     *\n     * List of all continents. You can use the locale header to get the data in a supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ContinentList>}\n     */\n    async listContinents(): Promise<Models.ContinentList> {\n        const apiPath = '/locale/continents';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List countries\n     *\n     * List of all countries. You can use the locale header to get the data in a supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.CountryList>}\n     */\n    async listCountries(): Promise<Models.CountryList> {\n        const apiPath = '/locale/countries';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List EU countries\n     *\n     * List of all countries that are currently members of the EU. You can use the locale header to get the data in a supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.CountryList>}\n     */\n    async listCountriesEU(): Promise<Models.CountryList> {\n        const apiPath = '/locale/countries/eu';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List countries phone codes\n     *\n     * List of all countries phone codes. You can use the locale header to get the data in a supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.PhoneList>}\n     */\n    async listCountriesPhones(): Promise<Models.PhoneList> {\n        const apiPath = '/locale/countries/phones';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List currencies\n     *\n     * List of all currencies, including currency symbol, name, plural, and decimal digits for all major and minor currencies. You can use the locale header to get the data in a supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.CurrencyList>}\n     */\n    async listCurrencies(): Promise<Models.CurrencyList> {\n        const apiPath = '/locale/currencies';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List languages\n     *\n     * List of all languages classified by ISO 639-1 including 2-letter code, name in English, and name in the respective language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.LanguageList>}\n     */\n    async listLanguages(): Promise<Models.LanguageList> {\n        const apiPath = '/locale/languages';\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5040, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/services/messaging.ts"],"sourcesContent":["import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\nimport { MessagePriority } from '../enums/message-priority';\nimport { SmtpEncryption } from '../enums/smtp-encryption';\n\nexport class Messaging {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * List messages\n     *\n     * Get a list of all messages from the current Appwrite project.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MessageList>}\n     */\n    async listMessages(queries?: string[], search?: string): Promise<Models.MessageList> {\n        const apiPath = '/messaging/messages';\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create email\n     *\n     * Create a new email message.\n     *\n     * @param {string} messageId\n     * @param {string} subject\n     * @param {string} content\n     * @param {string[]} topics\n     * @param {string[]} users\n     * @param {string[]} targets\n     * @param {string[]} cc\n     * @param {string[]} bcc\n     * @param {string[]} attachments\n     * @param {boolean} draft\n     * @param {boolean} html\n     * @param {string} scheduledAt\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Message>}\n     */\n    async createEmail(messageId: string, subject: string, content: string, topics?: string[], users?: string[], targets?: string[], cc?: string[], bcc?: string[], attachments?: string[], draft?: boolean, html?: boolean, scheduledAt?: string): Promise<Models.Message> {\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n        if (typeof subject === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"subject\"');\n        }\n        if (typeof content === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"content\"');\n        }\n        const apiPath = '/messaging/messages/email';\n        const payload: Payload = {};\n        if (typeof messageId !== 'undefined') {\n            payload['messageId'] = messageId;\n        }\n        if (typeof subject !== 'undefined') {\n            payload['subject'] = subject;\n        }\n        if (typeof content !== 'undefined') {\n            payload['content'] = content;\n        }\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n        if (typeof cc !== 'undefined') {\n            payload['cc'] = cc;\n        }\n        if (typeof bcc !== 'undefined') {\n            payload['bcc'] = bcc;\n        }\n        if (typeof attachments !== 'undefined') {\n            payload['attachments'] = attachments;\n        }\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n        if (typeof html !== 'undefined') {\n            payload['html'] = html;\n        }\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update email\n     *\n     * Update an email message by its unique ID.\n\n     *\n     * @param {string} messageId\n     * @param {string[]} topics\n     * @param {string[]} users\n     * @param {string[]} targets\n     * @param {string} subject\n     * @param {string} content\n     * @param {boolean} draft\n     * @param {boolean} html\n     * @param {string[]} cc\n     * @param {string[]} bcc\n     * @param {string} scheduledAt\n     * @param {string[]} attachments\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Message>}\n     */\n    async updateEmail(messageId: string, topics?: string[], users?: string[], targets?: string[], subject?: string, content?: string, draft?: boolean, html?: boolean, cc?: string[], bcc?: string[], scheduledAt?: string, attachments?: string[]): Promise<Models.Message> {\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n        const apiPath = '/messaging/messages/email/{messageId}'.replace('{messageId}', messageId);\n        const payload: Payload = {};\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n        if (typeof subject !== 'undefined') {\n            payload['subject'] = subject;\n        }\n        if (typeof content !== 'undefined') {\n            payload['content'] = content;\n        }\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n        if (typeof html !== 'undefined') {\n            payload['html'] = html;\n        }\n        if (typeof cc !== 'undefined') {\n            payload['cc'] = cc;\n        }\n        if (typeof bcc !== 'undefined') {\n            payload['bcc'] = bcc;\n        }\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n        if (typeof attachments !== 'undefined') {\n            payload['attachments'] = attachments;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create push notification\n     *\n     * Create a new push notification.\n     *\n     * @param {string} messageId\n     * @param {string} title\n     * @param {string} body\n     * @param {string[]} topics\n     * @param {string[]} users\n     * @param {string[]} targets\n     * @param {object} data\n     * @param {string} action\n     * @param {string} image\n     * @param {string} icon\n     * @param {string} sound\n     * @param {string} color\n     * @param {string} tag\n     * @param {number} badge\n     * @param {boolean} draft\n     * @param {string} scheduledAt\n     * @param {boolean} contentAvailable\n     * @param {boolean} critical\n     * @param {MessagePriority} priority\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Message>}\n     */\n    async createPush(messageId: string, title?: string, body?: string, topics?: string[], users?: string[], targets?: string[], data?: object, action?: string, image?: string, icon?: string, sound?: string, color?: string, tag?: string, badge?: number, draft?: boolean, scheduledAt?: string, contentAvailable?: boolean, critical?: boolean, priority?: MessagePriority): Promise<Models.Message> {\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n        const apiPath = '/messaging/messages/push';\n        const payload: Payload = {};\n        if (typeof messageId !== 'undefined') {\n            payload['messageId'] = messageId;\n        }\n        if (typeof title !== 'undefined') {\n            payload['title'] = title;\n        }\n        if (typeof body !== 'undefined') {\n            payload['body'] = body;\n        }\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n        if (typeof action !== 'undefined') {\n            payload['action'] = action;\n        }\n        if (typeof image !== 'undefined') {\n            payload['image'] = image;\n        }\n        if (typeof icon !== 'undefined') {\n            payload['icon'] = icon;\n        }\n        if (typeof sound !== 'undefined') {\n            payload['sound'] = sound;\n        }\n        if (typeof color !== 'undefined') {\n            payload['color'] = color;\n        }\n        if (typeof tag !== 'undefined') {\n            payload['tag'] = tag;\n        }\n        if (typeof badge !== 'undefined') {\n            payload['badge'] = badge;\n        }\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n        if (typeof contentAvailable !== 'undefined') {\n            payload['contentAvailable'] = contentAvailable;\n        }\n        if (typeof critical !== 'undefined') {\n            payload['critical'] = critical;\n        }\n        if (typeof priority !== 'undefined') {\n            payload['priority'] = priority;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update push notification\n     *\n     * Update a push notification by its unique ID.\n\n     *\n     * @param {string} messageId\n     * @param {string[]} topics\n     * @param {string[]} users\n     * @param {string[]} targets\n     * @param {string} title\n     * @param {string} body\n     * @param {object} data\n     * @param {string} action\n     * @param {string} image\n     * @param {string} icon\n     * @param {string} sound\n     * @param {string} color\n     * @param {string} tag\n     * @param {number} badge\n     * @param {boolean} draft\n     * @param {string} scheduledAt\n     * @param {boolean} contentAvailable\n     * @param {boolean} critical\n     * @param {MessagePriority} priority\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Message>}\n     */\n    async updatePush(messageId: string, topics?: string[], users?: string[], targets?: string[], title?: string, body?: string, data?: object, action?: string, image?: string, icon?: string, sound?: string, color?: string, tag?: string, badge?: number, draft?: boolean, scheduledAt?: string, contentAvailable?: boolean, critical?: boolean, priority?: MessagePriority): Promise<Models.Message> {\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n        const apiPath = '/messaging/messages/push/{messageId}'.replace('{messageId}', messageId);\n        const payload: Payload = {};\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n        if (typeof title !== 'undefined') {\n            payload['title'] = title;\n        }\n        if (typeof body !== 'undefined') {\n            payload['body'] = body;\n        }\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n        if (typeof action !== 'undefined') {\n            payload['action'] = action;\n        }\n        if (typeof image !== 'undefined') {\n            payload['image'] = image;\n        }\n        if (typeof icon !== 'undefined') {\n            payload['icon'] = icon;\n        }\n        if (typeof sound !== 'undefined') {\n            payload['sound'] = sound;\n        }\n        if (typeof color !== 'undefined') {\n            payload['color'] = color;\n        }\n        if (typeof tag !== 'undefined') {\n            payload['tag'] = tag;\n        }\n        if (typeof badge !== 'undefined') {\n            payload['badge'] = badge;\n        }\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n        if (typeof contentAvailable !== 'undefined') {\n            payload['contentAvailable'] = contentAvailable;\n        }\n        if (typeof critical !== 'undefined') {\n            payload['critical'] = critical;\n        }\n        if (typeof priority !== 'undefined') {\n            payload['priority'] = priority;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create SMS\n     *\n     * Create a new SMS message.\n     *\n     * @param {string} messageId\n     * @param {string} content\n     * @param {string[]} topics\n     * @param {string[]} users\n     * @param {string[]} targets\n     * @param {boolean} draft\n     * @param {string} scheduledAt\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Message>}\n     */\n    async createSms(messageId: string, content: string, topics?: string[], users?: string[], targets?: string[], draft?: boolean, scheduledAt?: string): Promise<Models.Message> {\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n        if (typeof content === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"content\"');\n        }\n        const apiPath = '/messaging/messages/sms';\n        const payload: Payload = {};\n        if (typeof messageId !== 'undefined') {\n            payload['messageId'] = messageId;\n        }\n        if (typeof content !== 'undefined') {\n            payload['content'] = content;\n        }\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update SMS\n     *\n     * Update an email message by its unique ID.\n\n     *\n     * @param {string} messageId\n     * @param {string[]} topics\n     * @param {string[]} users\n     * @param {string[]} targets\n     * @param {string} content\n     * @param {boolean} draft\n     * @param {string} scheduledAt\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Message>}\n     */\n    async updateSms(messageId: string, topics?: string[], users?: string[], targets?: string[], content?: string, draft?: boolean, scheduledAt?: string): Promise<Models.Message> {\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n        const apiPath = '/messaging/messages/sms/{messageId}'.replace('{messageId}', messageId);\n        const payload: Payload = {};\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n        if (typeof content !== 'undefined') {\n            payload['content'] = content;\n        }\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get message\n     *\n     * Get a message by its unique ID.\n\n     *\n     * @param {string} messageId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Message>}\n     */\n    async getMessage(messageId: string): Promise<Models.Message> {\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n        const apiPath = '/messaging/messages/{messageId}'.replace('{messageId}', messageId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete message\n     *\n     * Delete a message. If the message is not a draft or scheduled, but has been sent, this will not recall the message.\n     *\n     * @param {string} messageId\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async delete(messageId: string): Promise<{}> {\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n        const apiPath = '/messaging/messages/{messageId}'.replace('{messageId}', messageId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List message logs\n     *\n     * Get the message activity logs listed by its unique ID.\n     *\n     * @param {string} messageId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.LogList>}\n     */\n    async listMessageLogs(messageId: string, queries?: string[]): Promise<Models.LogList> {\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n        const apiPath = '/messaging/messages/{messageId}/logs'.replace('{messageId}', messageId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List message targets\n     *\n     * Get a list of the targets associated with a message.\n     *\n     * @param {string} messageId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.TargetList>}\n     */\n    async listTargets(messageId: string, queries?: string[]): Promise<Models.TargetList> {\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n        const apiPath = '/messaging/messages/{messageId}/targets'.replace('{messageId}', messageId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List providers\n     *\n     * Get a list of all providers from the current Appwrite project.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.ProviderList>}\n     */\n    async listProviders(queries?: string[], search?: string): Promise<Models.ProviderList> {\n        const apiPath = '/messaging/providers';\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create APNS provider\n     *\n     * Create a new Apple Push Notification service provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} authKey\n     * @param {string} authKeyId\n     * @param {string} teamId\n     * @param {string} bundleId\n     * @param {boolean} sandbox\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    async createApnsProvider(providerId: string, name: string, authKey?: string, authKeyId?: string, teamId?: string, bundleId?: string, sandbox?: boolean, enabled?: boolean): Promise<Models.Provider> {\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = '/messaging/providers/apns';\n        const payload: Payload = {};\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof authKey !== 'undefined') {\n            payload['authKey'] = authKey;\n        }\n        if (typeof authKeyId !== 'undefined') {\n            payload['authKeyId'] = authKeyId;\n        }\n        if (typeof teamId !== 'undefined') {\n            payload['teamId'] = teamId;\n        }\n        if (typeof bundleId !== 'undefined') {\n            payload['bundleId'] = bundleId;\n        }\n        if (typeof sandbox !== 'undefined') {\n            payload['sandbox'] = sandbox;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update APNS provider\n     *\n     * Update a Apple Push Notification service provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @param {string} authKey\n     * @param {string} authKeyId\n     * @param {string} teamId\n     * @param {string} bundleId\n     * @param {boolean} sandbox\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    async updateApnsProvider(providerId: string, name?: string, enabled?: boolean, authKey?: string, authKeyId?: string, teamId?: string, bundleId?: string, sandbox?: boolean): Promise<Models.Provider> {\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = '/messaging/providers/apns/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof authKey !== 'undefined') {\n            payload['authKey'] = authKey;\n        }\n        if (typeof authKeyId !== 'undefined') {\n            payload['authKeyId'] = authKeyId;\n        }\n        if (typeof teamId !== 'undefined') {\n            payload['teamId'] = teamId;\n        }\n        if (typeof bundleId !== 'undefined') {\n            payload['bundleId'] = bundleId;\n        }\n        if (typeof sandbox !== 'undefined') {\n            payload['sandbox'] = sandbox;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create FCM provider\n     *\n     * Create a new Firebase Cloud Messaging provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {object} serviceAccountJSON\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    async createFcmProvider(providerId: string, name: string, serviceAccountJSON?: object, enabled?: boolean): Promise<Models.Provider> {\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = '/messaging/providers/fcm';\n        const payload: Payload = {};\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof serviceAccountJSON !== 'undefined') {\n            payload['serviceAccountJSON'] = serviceAccountJSON;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update FCM provider\n     *\n     * Update a Firebase Cloud Messaging provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @param {object} serviceAccountJSON\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    async updateFcmProvider(providerId: string, name?: string, enabled?: boolean, serviceAccountJSON?: object): Promise<Models.Provider> {\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = '/messaging/providers/fcm/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof serviceAccountJSON !== 'undefined') {\n            payload['serviceAccountJSON'] = serviceAccountJSON;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create Mailgun provider\n     *\n     * Create a new Mailgun provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} apiKey\n     * @param {string} domain\n     * @param {boolean} isEuRegion\n     * @param {string} fromName\n     * @param {string} fromEmail\n     * @param {string} replyToName\n     * @param {string} replyToEmail\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    async createMailgunProvider(providerId: string, name: string, apiKey?: string, domain?: string, isEuRegion?: boolean, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean): Promise<Models.Provider> {\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = '/messaging/providers/mailgun';\n        const payload: Payload = {};\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n        if (typeof domain !== 'undefined') {\n            payload['domain'] = domain;\n        }\n        if (typeof isEuRegion !== 'undefined') {\n            payload['isEuRegion'] = isEuRegion;\n        }\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update Mailgun provider\n     *\n     * Update a Mailgun provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} apiKey\n     * @param {string} domain\n     * @param {boolean} isEuRegion\n     * @param {boolean} enabled\n     * @param {string} fromName\n     * @param {string} fromEmail\n     * @param {string} replyToName\n     * @param {string} replyToEmail\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    async updateMailgunProvider(providerId: string, name?: string, apiKey?: string, domain?: string, isEuRegion?: boolean, enabled?: boolean, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string): Promise<Models.Provider> {\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = '/messaging/providers/mailgun/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n        if (typeof domain !== 'undefined') {\n            payload['domain'] = domain;\n        }\n        if (typeof isEuRegion !== 'undefined') {\n            payload['isEuRegion'] = isEuRegion;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create Msg91 provider\n     *\n     * Create a new MSG91 provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} templateId\n     * @param {string} senderId\n     * @param {string} authKey\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    async createMsg91Provider(providerId: string, name: string, templateId?: string, senderId?: string, authKey?: string, enabled?: boolean): Promise<Models.Provider> {\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = '/messaging/providers/msg91';\n        const payload: Payload = {};\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof templateId !== 'undefined') {\n            payload['templateId'] = templateId;\n        }\n        if (typeof senderId !== 'undefined') {\n            payload['senderId'] = senderId;\n        }\n        if (typeof authKey !== 'undefined') {\n            payload['authKey'] = authKey;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update Msg91 provider\n     *\n     * Update a MSG91 provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @param {string} templateId\n     * @param {string} senderId\n     * @param {string} authKey\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    async updateMsg91Provider(providerId: string, name?: string, enabled?: boolean, templateId?: string, senderId?: string, authKey?: string): Promise<Models.Provider> {\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = '/messaging/providers/msg91/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof templateId !== 'undefined') {\n            payload['templateId'] = templateId;\n        }\n        if (typeof senderId !== 'undefined') {\n            payload['senderId'] = senderId;\n        }\n        if (typeof authKey !== 'undefined') {\n            payload['authKey'] = authKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create Sendgrid provider\n     *\n     * Create a new Sendgrid provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} apiKey\n     * @param {string} fromName\n     * @param {string} fromEmail\n     * @param {string} replyToName\n     * @param {string} replyToEmail\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    async createSendgridProvider(providerId: string, name: string, apiKey?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean): Promise<Models.Provider> {\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = '/messaging/providers/sendgrid';\n        const payload: Payload = {};\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update Sendgrid provider\n     *\n     * Update a Sendgrid provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @param {string} apiKey\n     * @param {string} fromName\n     * @param {string} fromEmail\n     * @param {string} replyToName\n     * @param {string} replyToEmail\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    async updateSendgridProvider(providerId: string, name?: string, enabled?: boolean, apiKey?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string): Promise<Models.Provider> {\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = '/messaging/providers/sendgrid/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create SMTP provider\n     *\n     * Create a new SMTP provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} host\n     * @param {number} port\n     * @param {string} username\n     * @param {string} password\n     * @param {SmtpEncryption} encryption\n     * @param {boolean} autoTLS\n     * @param {string} mailer\n     * @param {string} fromName\n     * @param {string} fromEmail\n     * @param {string} replyToName\n     * @param {string} replyToEmail\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    async createSmtpProvider(providerId: string, name: string, host: string, port?: number, username?: string, password?: string, encryption?: SmtpEncryption, autoTLS?: boolean, mailer?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean): Promise<Models.Provider> {\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        if (typeof host === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"host\"');\n        }\n        const apiPath = '/messaging/providers/smtp';\n        const payload: Payload = {};\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof host !== 'undefined') {\n            payload['host'] = host;\n        }\n        if (typeof port !== 'undefined') {\n            payload['port'] = port;\n        }\n        if (typeof username !== 'undefined') {\n            payload['username'] = username;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof encryption !== 'undefined') {\n            payload['encryption'] = encryption;\n        }\n        if (typeof autoTLS !== 'undefined') {\n            payload['autoTLS'] = autoTLS;\n        }\n        if (typeof mailer !== 'undefined') {\n            payload['mailer'] = mailer;\n        }\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update SMTP provider\n     *\n     * Update a SMTP provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} host\n     * @param {number} port\n     * @param {string} username\n     * @param {string} password\n     * @param {SmtpEncryption} encryption\n     * @param {boolean} autoTLS\n     * @param {string} mailer\n     * @param {string} fromName\n     * @param {string} fromEmail\n     * @param {string} replyToName\n     * @param {string} replyToEmail\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    async updateSmtpProvider(providerId: string, name?: string, host?: string, port?: number, username?: string, password?: string, encryption?: SmtpEncryption, autoTLS?: boolean, mailer?: string, fromName?: string, fromEmail?: string, replyToName?: string, replyToEmail?: string, enabled?: boolean): Promise<Models.Provider> {\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = '/messaging/providers/smtp/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof host !== 'undefined') {\n            payload['host'] = host;\n        }\n        if (typeof port !== 'undefined') {\n            payload['port'] = port;\n        }\n        if (typeof username !== 'undefined') {\n            payload['username'] = username;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof encryption !== 'undefined') {\n            payload['encryption'] = encryption;\n        }\n        if (typeof autoTLS !== 'undefined') {\n            payload['autoTLS'] = autoTLS;\n        }\n        if (typeof mailer !== 'undefined') {\n            payload['mailer'] = mailer;\n        }\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create Telesign provider\n     *\n     * Create a new Telesign provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} from\n     * @param {string} customerId\n     * @param {string} apiKey\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    async createTelesignProvider(providerId: string, name: string, from?: string, customerId?: string, apiKey?: string, enabled?: boolean): Promise<Models.Provider> {\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = '/messaging/providers/telesign';\n        const payload: Payload = {};\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n        if (typeof customerId !== 'undefined') {\n            payload['customerId'] = customerId;\n        }\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update Telesign provider\n     *\n     * Update a Telesign provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @param {string} customerId\n     * @param {string} apiKey\n     * @param {string} from\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    async updateTelesignProvider(providerId: string, name?: string, enabled?: boolean, customerId?: string, apiKey?: string, from?: string): Promise<Models.Provider> {\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = '/messaging/providers/telesign/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof customerId !== 'undefined') {\n            payload['customerId'] = customerId;\n        }\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create Textmagic provider\n     *\n     * Create a new Textmagic provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} from\n     * @param {string} username\n     * @param {string} apiKey\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    async createTextmagicProvider(providerId: string, name: string, from?: string, username?: string, apiKey?: string, enabled?: boolean): Promise<Models.Provider> {\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = '/messaging/providers/textmagic';\n        const payload: Payload = {};\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n        if (typeof username !== 'undefined') {\n            payload['username'] = username;\n        }\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update Textmagic provider\n     *\n     * Update a Textmagic provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @param {string} username\n     * @param {string} apiKey\n     * @param {string} from\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    async updateTextmagicProvider(providerId: string, name?: string, enabled?: boolean, username?: string, apiKey?: string, from?: string): Promise<Models.Provider> {\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = '/messaging/providers/textmagic/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof username !== 'undefined') {\n            payload['username'] = username;\n        }\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create Twilio provider\n     *\n     * Create a new Twilio provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} from\n     * @param {string} accountSid\n     * @param {string} authToken\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    async createTwilioProvider(providerId: string, name: string, from?: string, accountSid?: string, authToken?: string, enabled?: boolean): Promise<Models.Provider> {\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = '/messaging/providers/twilio';\n        const payload: Payload = {};\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n        if (typeof accountSid !== 'undefined') {\n            payload['accountSid'] = accountSid;\n        }\n        if (typeof authToken !== 'undefined') {\n            payload['authToken'] = authToken;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update Twilio provider\n     *\n     * Update a Twilio provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @param {string} accountSid\n     * @param {string} authToken\n     * @param {string} from\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    async updateTwilioProvider(providerId: string, name?: string, enabled?: boolean, accountSid?: string, authToken?: string, from?: string): Promise<Models.Provider> {\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = '/messaging/providers/twilio/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof accountSid !== 'undefined') {\n            payload['accountSid'] = accountSid;\n        }\n        if (typeof authToken !== 'undefined') {\n            payload['authToken'] = authToken;\n        }\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create Vonage provider\n     *\n     * Create a new Vonage provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} from\n     * @param {string} apiKey\n     * @param {string} apiSecret\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    async createVonageProvider(providerId: string, name: string, from?: string, apiKey?: string, apiSecret?: string, enabled?: boolean): Promise<Models.Provider> {\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = '/messaging/providers/vonage';\n        const payload: Payload = {};\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n        if (typeof apiSecret !== 'undefined') {\n            payload['apiSecret'] = apiSecret;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update Vonage provider\n     *\n     * Update a Vonage provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @param {string} apiKey\n     * @param {string} apiSecret\n     * @param {string} from\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    async updateVonageProvider(providerId: string, name?: string, enabled?: boolean, apiKey?: string, apiSecret?: string, from?: string): Promise<Models.Provider> {\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = '/messaging/providers/vonage/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n        if (typeof apiSecret !== 'undefined') {\n            payload['apiSecret'] = apiSecret;\n        }\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get provider\n     *\n     * Get a provider by its unique ID.\n\n     *\n     * @param {string} providerId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Provider>}\n     */\n    async getProvider(providerId: string): Promise<Models.Provider> {\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = '/messaging/providers/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete provider\n     *\n     * Delete a provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async deleteProvider(providerId: string): Promise<{}> {\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = '/messaging/providers/{providerId}'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List provider logs\n     *\n     * Get the provider activity logs listed by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.LogList>}\n     */\n    async listProviderLogs(providerId: string, queries?: string[]): Promise<Models.LogList> {\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = '/messaging/providers/{providerId}/logs'.replace('{providerId}', providerId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List subscriber logs\n     *\n     * Get the subscriber activity logs listed by its unique ID.\n     *\n     * @param {string} subscriberId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.LogList>}\n     */\n    async listSubscriberLogs(subscriberId: string, queries?: string[]): Promise<Models.LogList> {\n        if (typeof subscriberId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"subscriberId\"');\n        }\n        const apiPath = '/messaging/subscribers/{subscriberId}/logs'.replace('{subscriberId}', subscriberId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List topics\n     *\n     * Get a list of all topics from the current Appwrite project.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.TopicList>}\n     */\n    async listTopics(queries?: string[], search?: string): Promise<Models.TopicList> {\n        const apiPath = '/messaging/topics';\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create topic\n     *\n     * Create a new topic.\n     *\n     * @param {string} topicId\n     * @param {string} name\n     * @param {string[]} subscribe\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Topic>}\n     */\n    async createTopic(topicId: string, name: string, subscribe?: string[]): Promise<Models.Topic> {\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = '/messaging/topics';\n        const payload: Payload = {};\n        if (typeof topicId !== 'undefined') {\n            payload['topicId'] = topicId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof subscribe !== 'undefined') {\n            payload['subscribe'] = subscribe;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get topic\n     *\n     * Get a topic by its unique ID.\n\n     *\n     * @param {string} topicId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Topic>}\n     */\n    async getTopic(topicId: string): Promise<Models.Topic> {\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n        const apiPath = '/messaging/topics/{topicId}'.replace('{topicId}', topicId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update topic\n     *\n     * Update a topic by its unique ID.\n\n     *\n     * @param {string} topicId\n     * @param {string} name\n     * @param {string[]} subscribe\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Topic>}\n     */\n    async updateTopic(topicId: string, name?: string, subscribe?: string[]): Promise<Models.Topic> {\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n        const apiPath = '/messaging/topics/{topicId}'.replace('{topicId}', topicId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof subscribe !== 'undefined') {\n            payload['subscribe'] = subscribe;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete topic\n     *\n     * Delete a topic by its unique ID.\n     *\n     * @param {string} topicId\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async deleteTopic(topicId: string): Promise<{}> {\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n        const apiPath = '/messaging/topics/{topicId}'.replace('{topicId}', topicId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List topic logs\n     *\n     * Get the topic activity logs listed by its unique ID.\n     *\n     * @param {string} topicId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.LogList>}\n     */\n    async listTopicLogs(topicId: string, queries?: string[]): Promise<Models.LogList> {\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n        const apiPath = '/messaging/topics/{topicId}/logs'.replace('{topicId}', topicId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List subscribers\n     *\n     * Get a list of all subscribers from the current Appwrite project.\n     *\n     * @param {string} topicId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.SubscriberList>}\n     */\n    async listSubscribers(topicId: string, queries?: string[], search?: string): Promise<Models.SubscriberList> {\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n        const apiPath = '/messaging/topics/{topicId}/subscribers'.replace('{topicId}', topicId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create subscriber\n     *\n     * Create a new subscriber.\n     *\n     * @param {string} topicId\n     * @param {string} subscriberId\n     * @param {string} targetId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Subscriber>}\n     */\n    async createSubscriber(topicId: string, subscriberId: string, targetId: string): Promise<Models.Subscriber> {\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n        if (typeof subscriberId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"subscriberId\"');\n        }\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n        const apiPath = '/messaging/topics/{topicId}/subscribers'.replace('{topicId}', topicId);\n        const payload: Payload = {};\n        if (typeof subscriberId !== 'undefined') {\n            payload['subscriberId'] = subscriberId;\n        }\n        if (typeof targetId !== 'undefined') {\n            payload['targetId'] = targetId;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get subscriber\n     *\n     * Get a subscriber by its unique ID.\n\n     *\n     * @param {string} topicId\n     * @param {string} subscriberId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Subscriber>}\n     */\n    async getSubscriber(topicId: string, subscriberId: string): Promise<Models.Subscriber> {\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n        if (typeof subscriberId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"subscriberId\"');\n        }\n        const apiPath = '/messaging/topics/{topicId}/subscribers/{subscriberId}'.replace('{topicId}', topicId).replace('{subscriberId}', subscriberId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete subscriber\n     *\n     * Delete a subscriber by its unique ID.\n     *\n     * @param {string} topicId\n     * @param {string} subscriberId\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async deleteSubscriber(topicId: string, subscriberId: string): Promise<{}> {\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n        if (typeof subscriberId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"subscriberId\"');\n        }\n        const apiPath = '/messaging/topics/{topicId}/subscribers/{subscriberId}'.replace('{topicId}', topicId).replace('{subscriberId}', subscriberId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6946, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/services/storage.ts"],"sourcesContent":["import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\nimport { Compression } from '../enums/compression';\nimport { ImageGravity } from '../enums/image-gravity';\nimport { ImageFormat } from '../enums/image-format';\n\nexport class Storage {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * List buckets\n     *\n     * Get a list of all the storage buckets. You can use the query params to filter your results.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.BucketList>}\n     */\n    async listBuckets(queries?: string[], search?: string): Promise<Models.BucketList> {\n        const apiPath = '/storage/buckets';\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create bucket\n     *\n     * Create a new storage bucket.\n     *\n     * @param {string} bucketId\n     * @param {string} name\n     * @param {string[]} permissions\n     * @param {boolean} fileSecurity\n     * @param {boolean} enabled\n     * @param {number} maximumFileSize\n     * @param {string[]} allowedFileExtensions\n     * @param {Compression} compression\n     * @param {boolean} encryption\n     * @param {boolean} antivirus\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Bucket>}\n     */\n    async createBucket(bucketId: string, name: string, permissions?: string[], fileSecurity?: boolean, enabled?: boolean, maximumFileSize?: number, allowedFileExtensions?: string[], compression?: Compression, encryption?: boolean, antivirus?: boolean): Promise<Models.Bucket> {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = '/storage/buckets';\n        const payload: Payload = {};\n        if (typeof bucketId !== 'undefined') {\n            payload['bucketId'] = bucketId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n        if (typeof fileSecurity !== 'undefined') {\n            payload['fileSecurity'] = fileSecurity;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof maximumFileSize !== 'undefined') {\n            payload['maximumFileSize'] = maximumFileSize;\n        }\n        if (typeof allowedFileExtensions !== 'undefined') {\n            payload['allowedFileExtensions'] = allowedFileExtensions;\n        }\n        if (typeof compression !== 'undefined') {\n            payload['compression'] = compression;\n        }\n        if (typeof encryption !== 'undefined') {\n            payload['encryption'] = encryption;\n        }\n        if (typeof antivirus !== 'undefined') {\n            payload['antivirus'] = antivirus;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get bucket\n     *\n     * Get a storage bucket by its unique ID. This endpoint response returns a JSON object with the storage bucket metadata.\n     *\n     * @param {string} bucketId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Bucket>}\n     */\n    async getBucket(bucketId: string): Promise<Models.Bucket> {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        const apiPath = '/storage/buckets/{bucketId}'.replace('{bucketId}', bucketId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update bucket\n     *\n     * Update a storage bucket by its unique ID.\n     *\n     * @param {string} bucketId\n     * @param {string} name\n     * @param {string[]} permissions\n     * @param {boolean} fileSecurity\n     * @param {boolean} enabled\n     * @param {number} maximumFileSize\n     * @param {string[]} allowedFileExtensions\n     * @param {Compression} compression\n     * @param {boolean} encryption\n     * @param {boolean} antivirus\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Bucket>}\n     */\n    async updateBucket(bucketId: string, name: string, permissions?: string[], fileSecurity?: boolean, enabled?: boolean, maximumFileSize?: number, allowedFileExtensions?: string[], compression?: Compression, encryption?: boolean, antivirus?: boolean): Promise<Models.Bucket> {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = '/storage/buckets/{bucketId}'.replace('{bucketId}', bucketId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n        if (typeof fileSecurity !== 'undefined') {\n            payload['fileSecurity'] = fileSecurity;\n        }\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n        if (typeof maximumFileSize !== 'undefined') {\n            payload['maximumFileSize'] = maximumFileSize;\n        }\n        if (typeof allowedFileExtensions !== 'undefined') {\n            payload['allowedFileExtensions'] = allowedFileExtensions;\n        }\n        if (typeof compression !== 'undefined') {\n            payload['compression'] = compression;\n        }\n        if (typeof encryption !== 'undefined') {\n            payload['encryption'] = encryption;\n        }\n        if (typeof antivirus !== 'undefined') {\n            payload['antivirus'] = antivirus;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete bucket\n     *\n     * Delete a storage bucket by its unique ID.\n     *\n     * @param {string} bucketId\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async deleteBucket(bucketId: string): Promise<{}> {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        const apiPath = '/storage/buckets/{bucketId}'.replace('{bucketId}', bucketId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List files\n     *\n     * Get a list of all the user files. You can use the query params to filter your results.\n     *\n     * @param {string} bucketId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.FileList>}\n     */\n    async listFiles(bucketId: string, queries?: string[], search?: string): Promise<Models.FileList> {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        const apiPath = '/storage/buckets/{bucketId}/files'.replace('{bucketId}', bucketId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create file\n     *\n     * Create a new file. Before using this route, you should create a new bucket resource using either a [server integration](https://appwrite.io/docs/server/storage#storageCreateBucket) API or directly from your Appwrite console.\n\nLarger files should be uploaded using multiple requests with the [content-range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range) header to send a partial request with a maximum supported chunk of `5MB`. The `content-range` header values should always be in bytes.\n\nWhen the first request is sent, the server will return the **File** object, and the subsequent part request must include the file&#039;s **id** in `x-appwrite-id` header to allow the server to know that the partial upload is for the existing file and not for a new one.\n\nIf you&#039;re creating a new file using one of the Appwrite SDKs, all the chunking logic will be managed by the SDK internally.\n\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @param {File} file\n     * @param {string[]} permissions\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.File>}\n     */\n    async createFile(bucketId: string, fileId: string, file: File, permissions?: string[], onProgress = (progress: UploadProgress) => {}): Promise<Models.File> {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n        if (typeof file === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"file\"');\n        }\n        const apiPath = '/storage/buckets/{bucketId}/files'.replace('{bucketId}', bucketId);\n        const payload: Payload = {};\n        if (typeof fileId !== 'undefined') {\n            payload['fileId'] = fileId;\n        }\n        if (typeof file !== 'undefined') {\n            payload['file'] = file;\n        }\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'multipart/form-data',\n        }\n\n        return await this.client.chunkedUpload(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n            onProgress\n        );\n    }\n    /**\n     * Get file\n     *\n     * Get a file by its unique ID. This endpoint response returns a JSON object with the file metadata.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.File>}\n     */\n    async getFile(bucketId: string, fileId: string): Promise<Models.File> {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update file\n     *\n     * Update a file by its unique ID. Only users with write permissions have access to update this resource.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @param {string} name\n     * @param {string[]} permissions\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.File>}\n     */\n    async updateFile(bucketId: string, fileId: string, name?: string, permissions?: string[]): Promise<Models.File> {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete file\n     *\n     * Delete a file by its unique ID. Only users with write permissions have access to delete this resource.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async deleteFile(bucketId: string, fileId: string): Promise<{}> {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get file for download\n     *\n     * Get a file content by its unique ID. The endpoint response return with a &#039;Content-Disposition: attachment&#039; header that tells the browser to start downloading the file to user downloads directory.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     */\n    async getFileDownload(bucketId: string, fileId: string): Promise<ArrayBuffer> {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}/download'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n            'arrayBuffer'\n        );\n    }\n    /**\n     * Get file preview\n     *\n     * Get a file preview image. Currently, this method supports preview for image files (jpg, png, and gif), other supported formats, like pdf, docs, slides, and spreadsheets, will return the file icon image. You can also pass query string arguments for cutting and resizing your preview image. Preview is supported only for image files smaller than 10MB.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @param {number} width\n     * @param {number} height\n     * @param {ImageGravity} gravity\n     * @param {number} quality\n     * @param {number} borderWidth\n     * @param {string} borderColor\n     * @param {number} borderRadius\n     * @param {number} opacity\n     * @param {number} rotation\n     * @param {string} background\n     * @param {ImageFormat} output\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     */\n    async getFilePreview(bucketId: string, fileId: string, width?: number, height?: number, gravity?: ImageGravity, quality?: number, borderWidth?: number, borderColor?: string, borderRadius?: number, opacity?: number, rotation?: number, background?: string, output?: ImageFormat): Promise<ArrayBuffer> {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}/preview'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n        if (typeof gravity !== 'undefined') {\n            payload['gravity'] = gravity;\n        }\n        if (typeof quality !== 'undefined') {\n            payload['quality'] = quality;\n        }\n        if (typeof borderWidth !== 'undefined') {\n            payload['borderWidth'] = borderWidth;\n        }\n        if (typeof borderColor !== 'undefined') {\n            payload['borderColor'] = borderColor;\n        }\n        if (typeof borderRadius !== 'undefined') {\n            payload['borderRadius'] = borderRadius;\n        }\n        if (typeof opacity !== 'undefined') {\n            payload['opacity'] = opacity;\n        }\n        if (typeof rotation !== 'undefined') {\n            payload['rotation'] = rotation;\n        }\n        if (typeof background !== 'undefined') {\n            payload['background'] = background;\n        }\n        if (typeof output !== 'undefined') {\n            payload['output'] = output;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n            'arrayBuffer'\n        );\n    }\n    /**\n     * Get file for view\n     *\n     * Get a file content by its unique ID. This endpoint is similar to the download method but returns with no  &#039;Content-Disposition: attachment&#039; header.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @throws {AppwriteException}\n     * @returns {Promise<ArrayBuffer>}\n     */\n    async getFileView(bucketId: string, fileId: string): Promise<ArrayBuffer> {\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}/view'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n            'arrayBuffer'\n        );\n    }\n}\n"],"names":[],"mappings":";;;;;;AAMO,IAAM,UAAN,MAAc,MAAA;AAAA,EAGjB,EAAA,UAAY,QAAgB;IACxB,OAAK,KAAA,IAAS,EAAA,CAAA;QAClB,IAAA,CAAA,MAAA,GAAA;IAAA;IAAA;;;;;;;;;GAYA,GACI,EADE,IACF,EAAM,MADQ,IACE,KADkB,EAClB,EAAA,IAD+D,EAC/D,EAAA;QAChB,MAAM,UAAmB,CAAC;QAC1B,IAAI,EAAA,KAAO,KAAA,CAAA,MAAY,aAAa;QAChC,IAAA,MAAQ,CAAA,QAAS,IAAI,aAAA;YACzB,OAAA,CAAA,UAAA,GAAA;QACA,IAAI,OAAO,WAAW,aAAa;QAC/B,IAAA,MAAQ,CAAA,OAAQ,IAAI,aAAA;YACxB,OAAA,CAAA,SAAA,GAAA;QACA,MAAM,MAAM,IAAI,IAAI,KAAK,OAAO,OAAO,WAAW,OAAO;QAEzD,MAAM,MAAA,IAAA,GAA2C,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,QAAA,GAAA;QAAA,EAC7C,IAAA,YAAgB,CAAA;YACpB,gBAAA;QAEA,OAAO,MAAM,KAAK,OAAO;QAAA,EACrB,KAAA,MAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CACA,OACA,KACA,YACJ;IACJ;IAAA;;;;;;;;;;;;;;;;;GAmBA,GACI,EADE,IACE,OAAO,EADI,IACJ,MADsB,CACT,CAAA,EAAA,EADuB,EACvB,EAAA,IAAa,KADkC,EAClC,EAAA,UAD0D,EAC1D,EAAA,KAD6E,EAC7E,EAAA,aADuG,EACvG,EAAA,mBADyI,EACzI,EAAA,SADoK,EACpK,EAAA,QAD0L,EAC1L,EAAA,OADuO,EACvO,EAAA;QACjC,IAAA,IAAM,GAAA,CAAI,YAAA,MAAkB,OAAA,iCAAwC;YACxE,MAAA,IAAA,mKAAA,CAAA,oBAAA,CAAA;QACA,IAAI,OAAO,SAAS,aAAa;QAC7B,IAAA,IAAM,GAAA,CAAI,QAAA,UAAkB,GAAA,iCAAoC;YACpE,MAAA,IAAA,mKAAA,CAAA,oBAAA,CAAA;QACA,MAAM,UAAU;QAChB,MAAM,UAAmB,CAAC;QAC1B,IAAI,EAAA,KAAO,KAAA,CAAA,OAAa,aAAa;QACjC,IAAA,MAAQ,CAAA,SAAU,IAAI,aAAA;YAC1B,OAAA,CAAA,WAAA,GAAA;QACA,IAAI,OAAO,SAAS,aAAa;QAC7B,IAAA,MAAQ,CAAA,KAAM,IAAI,aAAA;YACtB,OAAA,CAAA,OAAA,GAAA;QACA,IAAI,OAAO,gBAAgB,aAAa;QACpC,IAAA,MAAQ,CAAA,YAAa,IAAI,aAAA;YAC7B,OAAA,CAAA,cAAA,GAAA;QACA,IAAI,OAAO,iBAAiB,aAAa;QACrC,IAAA,MAAQ,CAAA,aAAc,IAAI,aAAA;YAC9B,OAAA,CAAA,eAAA,GAAA;QACA,IAAI,OAAO,YAAY,aAAa;QAChC,IAAA,MAAQ,CAAA,QAAS,IAAI,aAAA;YACzB,OAAA,CAAA,UAAA,GAAA;QACA,IAAI,OAAO,oBAAoB,aAAa;QACxC,IAAA,MAAQ,CAAA,gBAAiB,IAAI,aAAA;YACjC,OAAA,CAAA,kBAAA,GAAA;QACA,IAAI,OAAO,0BAA0B,aAAa;QAC9C,IAAA,MAAQ,CAAA,sBAAuB,IAAI,aAAA;YACvC,OAAA,CAAA,wBAAA,GAAA;QACA,IAAI,OAAO,gBAAgB,aAAa;QACpC,IAAA,MAAQ,CAAA,YAAa,IAAI,aAAA;YAC7B,OAAA,CAAA,cAAA,GAAA;QACA,IAAI,OAAO,eAAe,aAAa;QACnC,IAAA,MAAQ,CAAA,WAAY,IAAI,aAAA;YAC5B,OAAA,CAAA,aAAA,GAAA;QACA,IAAI,OAAO,cAAc,aAAa;QAClC,IAAA,MAAQ,CAAA,UAAW,IAAI,aAAA;YAC3B,OAAA,CAAA,YAAA,GAAA;QACA,MAAM,MAAM,IAAI,IAAI,KAAK,OAAO,OAAO,WAAW,OAAO;QAEzD,MAAM,MAAA,IAAA,GAA2C,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,QAAA,GAAA;QAAA,EAC7C,IAAA,YAAgB,CAAA;YACpB,gBAAA;QAEA,OAAO,MAAM,KAAK,OAAO;QAAA,EACrB,KAAA,MAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CACA,QACA,KACA,YACJ;IACJ;IAAA;;;;;;;;GAUA,GACI,EADE,IACE,MADQ,CACD,GAAA,MAD2C,EAC3C,EAAa,aAAa;QACjC,IAAA,IAAM,GAAA,CAAI,YAAA,MAAkB,OAAA,iCAAwC;YACxE,MAAA,IAAA,mKAAA,CAAA,oBAAA,CAAA;QACA,MAAM,UAAU,8BAA8B,QAAQ,cAAc,QAAQ;QAC5E,MAAM,UAAmB,CAAC,6BAAA,OAAA,CAAA,cAAA;QAC1B,MAAM,MAAM,IAAI,CAAA,GAAI,KAAK,OAAO,OAAO,WAAW,OAAO;QAEzD,MAAM,MAAA,IAAA,GAA2C,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,QAAA,GAAA;QAAA,EAC7C,IAAA,YAAgB,CAAA;YACpB,gBAAA;QAEA,OAAO,MAAM,KAAK,OAAO;QAAA,EACrB,KAAA,MAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CACA,OACA,KACA,YACJ;IACJ;IAAA;;;;;;;;;;;;;;;;;GAmBA,GACI,EADE,IACE,OAAO,EADI,IACJ,MADsB,CACT,CAAA,EAAA,EADuB,EACvB,EAAA,IAAa,KADkC,EAClC,EAAA,UAD0D,EAC1D,EAAA,KAD6E,EAC7E,EAAA,aADuG,EACvG,EAAA,mBADyI,EACzI,EAAA,SADoK,EACpK,EAAA,QAD0L,EAC1L,EAAA,OADuO,EACvO,EAAA;QACjC,IAAA,IAAM,GAAA,CAAI,YAAA,MAAkB,OAAA,iCAAwC;YACxE,MAAA,IAAA,mKAAA,CAAA,oBAAA,CAAA;QACA,IAAI,OAAO,SAAS,aAAa;QAC7B,IAAA,IAAM,GAAA,CAAI,QAAA,UAAkB,GAAA,iCAAoC;YACpE,MAAA,IAAA,mKAAA,CAAA,oBAAA,CAAA;QACA,MAAM,UAAU,8BAA8B,QAAQ,cAAc,QAAQ;QAC5E,MAAM,UAAmB,CAAC,6BAAA,OAAA,CAAA,cAAA;QAC1B,IAAI,EAAA,KAAO,KAAA,CAAA,GAAS,aAAa;QAC7B,IAAA,MAAQ,CAAA,KAAM,IAAI,aAAA;YACtB,OAAA,CAAA,OAAA,GAAA;QACA,IAAI,OAAO,gBAAgB,aAAa;QACpC,IAAA,MAAQ,CAAA,YAAa,IAAI,aAAA;YAC7B,OAAA,CAAA,cAAA,GAAA;QACA,IAAI,OAAO,iBAAiB,aAAa;QACrC,IAAA,MAAQ,CAAA,aAAc,IAAI,aAAA;YAC9B,OAAA,CAAA,eAAA,GAAA;QACA,IAAI,OAAO,YAAY,aAAa;QAChC,IAAA,MAAQ,CAAA,QAAS,IAAI,aAAA;YACzB,OAAA,CAAA,UAAA,GAAA;QACA,IAAI,OAAO,oBAAoB,aAAa;QACxC,IAAA,MAAQ,CAAA,gBAAiB,IAAI,aAAA;YACjC,OAAA,CAAA,kBAAA,GAAA;QACA,IAAI,OAAO,0BAA0B,aAAa;QAC9C,IAAA,MAAQ,CAAA,sBAAuB,IAAI,aAAA;YACvC,OAAA,CAAA,wBAAA,GAAA;QACA,IAAI,OAAO,gBAAgB,aAAa;QACpC,IAAA,MAAQ,CAAA,YAAa,IAAI,aAAA;YAC7B,OAAA,CAAA,cAAA,GAAA;QACA,IAAI,OAAO,eAAe,aAAa;QACnC,IAAA,MAAQ,CAAA,WAAY,IAAI,aAAA;YAC5B,OAAA,CAAA,aAAA,GAAA;QACA,IAAI,OAAO,cAAc,aAAa;QAClC,IAAA,MAAQ,CAAA,UAAW,IAAI,aAAA;YAC3B,OAAA,CAAA,YAAA,GAAA;QACA,MAAM,MAAM,IAAI,IAAI,KAAK,OAAO,OAAO,WAAW,OAAO;QAEzD,MAAM,MAAA,IAAA,GAA2C,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,QAAA,GAAA;QAAA,EAC7C,IAAA,YAAgB,CAAA;YACpB,gBAAA;QAEA,OAAO,MAAM,KAAK,OAAO;QAAA,EACrB,KAAA,MAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CACA,OACA,KACA,YACJ;IACJ;IAAA;;;;;;;;GAUA,GACI,EADE,IACE,OAAO,EADI,IACJ,MADmC,CACtB,CAAA,EAAA,UAAa;QACjC,IAAA,IAAM,GAAA,CAAI,YAAA,MAAkB,OAAA,iCAAwC;YACxE,MAAA,IAAA,mKAAA,CAAA,oBAAA,CAAA;QACA,MAAM,UAAU,8BAA8B,QAAQ,cAAc,QAAQ;QAC5E,MAAM,UAAmB,CAAC,6BAAA,OAAA,CAAA,cAAA;QAC1B,MAAM,MAAM,IAAI,CAAA,GAAI,KAAK,OAAO,OAAO,WAAW,OAAO;QAEzD,MAAM,MAAA,IAAA,GAA2C,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,QAAA,GAAA;QAAA,EAC7C,IAAA,YAAgB,CAAA;YACpB,gBAAA;QAEA,OAAO,MAAM,KAAK,OAAO;QAAA,EACrB,KAAA,MAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CACA,UACA,KACA,YACJ;IACJ;IAAA;;;;;;;;;;GAYA,GACI,EADE,IACE,MADQ,CACD,GAAA,MADmB,EACnB,EAAa,KAD0B,EAC1B,EAAA,IADqE,AACxD,EAAA,EAAA;QACjC,IAAA,IAAM,GAAA,CAAI,YAAA,MAAkB,OAAA,iCAAwC;YACxE,MAAA,IAAA,mKAAA,CAAA,oBAAA,CAAA;QACA,MAAM,UAAU,oCAAoC,QAAQ,cAAc,QAAQ;QAClF,MAAM,UAAmB,CAAC,mCAAA,OAAA,CAAA,cAAA;QAC1B,IAAI,EAAA,KAAO,KAAA,CAAA,MAAY,aAAa;QAChC,IAAA,MAAQ,CAAA,QAAS,IAAI,aAAA;YACzB,OAAA,CAAA,UAAA,GAAA;QACA,IAAI,OAAO,WAAW,aAAa;QAC/B,IAAA,MAAQ,CAAA,OAAQ,IAAI,aAAA;YACxB,OAAA,CAAA,SAAA,GAAA;QACA,MAAM,MAAM,IAAI,IAAI,KAAK,OAAO,OAAO,WAAW,OAAO;QAEzD,MAAM,MAAA,IAAA,GAA2C,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,QAAA,GAAA;QAAA,EAC7C,IAAA,YAAgB,CAAA;YACpB,gBAAA;QAEA,OAAO,MAAM,KAAK,OAAO;QAAA,EACrB,KAAA,MAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CACA,OACA,KACA,YACJ;IACJ;IAAA;;;;;;;;;;;;;;;;;;OAoBA,CAAM,EAA6H,GAAyB,GAAA,GAA3I,QAA2I,EAAzH,MAAyH,EAAzG,AAAyG,MAA7F,AAA6F,EAAA,IAAA,EAAA,KAArE,MAAqE,EAAA,KAAxD,CAAC,OAAuD,CAAA,KAA1B,OAC9H,CAAA,EAAA,GAAI,OAAO,aAAa,aAAa;QACjC,IAAA,IAAM,GAAA,CAAI,YAAA,MAAkB,OAAA,iCAAwC;YACxE,MAAA,IAAA,mKAAA,CAAA,oBAAA,CAAA;QACA,IAAI,OAAO,WAAW,aAAa;QAC/B,IAAA,IAAM,GAAA,CAAI,UAAA,QAAkB,KAAA,iCAAsC;YACtE,MAAA,IAAA,mKAAA,CAAA,oBAAA,CAAA;QACA,IAAI,OAAO,SAAS,aAAa;QAC7B,IAAA,IAAM,GAAA,CAAI,QAAA,UAAkB,GAAA,iCAAoC;YACpE,MAAA,IAAA,mKAAA,CAAA,oBAAA,CAAA;QACA,MAAM,UAAU,oCAAoC,QAAQ,cAAc,QAAQ;QAClF,MAAM,UAAmB,CAAC,mCAAA,OAAA,CAAA,cAAA;QAC1B,IAAI,EAAA,KAAO,KAAA,CAAA,KAAW,aAAa;QAC/B,IAAA,MAAQ,CAAA,OAAQ,IAAI,aAAA;YACxB,OAAA,CAAA,SAAA,GAAA;QACA,IAAI,OAAO,SAAS,aAAa;QAC7B,IAAA,MAAQ,CAAA,KAAM,IAAI,aAAA;YACtB,OAAA,CAAA,OAAA,GAAA;QACA,IAAI,OAAO,gBAAgB,aAAa;QACpC,IAAA,MAAQ,CAAA,YAAa,IAAI,aAAA;YAC7B,OAAA,CAAA,cAAA,GAAA;QACA,MAAM,MAAM,IAAI,IAAI,KAAK,OAAO,OAAO,WAAW,OAAO;QAEzD,MAAM,MAAA,IAAA,GAA2C,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,QAAA,GAAA;QAAA,EAC7C,IAAA,YAAgB,CAAA;YACpB,gBAAA;QAEA,OAAO,MAAM,KAAK,OAAO;QAAA,EACrB,KAAA,MAAA,IAAA,CAAA,MAAA,CAAA,aAAA,CACA,QACA,KACA,YACA,SACJ;IACJ;IAAA;;;;;;;;;GAWA,GACI,EADE,IACE,IADM,GACC,CAAA,MADiB,EACjB,EAAA,EAAa,EAD0C,EAC1C,EAAA,OAAa;QACjC,IAAA,IAAM,GAAA,CAAI,YAAA,MAAkB,OAAA,iCAAwC;YACxE,MAAA,IAAA,mKAAA,CAAA,oBAAA,CAAA;QACA,IAAI,OAAO,WAAW,aAAa;QAC/B,IAAA,IAAM,GAAA,CAAI,UAAA,QAAkB,KAAA,iCAAsC;YACtE,MAAA,IAAA,mKAAA,CAAA,oBAAA,CAAA;QACA,MAAM,UAAU,6CAA6C,QAAQ,cAAc,QAAQ,EAAE,QAAQ,YAAY,MAAM;QACvH,MAAM,UAAmB,CAAC,4CAAA,OAAA,CAAA,cAAA,UAAA,OAAA,CAAA,YAAA;QAC1B,MAAM,MAAM,IAAI,CAAA,GAAI,KAAK,OAAO,OAAO,WAAW,OAAO;QAEzD,MAAM,MAAA,IAAA,GAA2C,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,QAAA,GAAA;QAAA,EAC7C,IAAA,YAAgB,CAAA;YACpB,gBAAA;QAEA,OAAO,MAAM,KAAK,OAAO;QAAA,EACrB,KAAA,MAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CACA,OACA,KACA,YACJ;IACJ;IAAA;;;;;;;;;;;GAaA,GACI,EADE,IACE,OAAO,AADE,IACF,MADoB,EACpB,CAAa,CAAA,IADuB,EACvB,EAAA,EADsC,EACzB,EAAA,SADuE,EACvE,EAAA;QACjC,IAAA,IAAM,GAAA,CAAI,YAAA,MAAkB,OAAA,iCAAwC;YACxE,MAAA,IAAA,mKAAA,CAAA,oBAAA,CAAA;QACA,IAAI,OAAO,WAAW,aAAa;QAC/B,IAAA,IAAM,GAAA,CAAI,UAAA,QAAkB,KAAA,iCAAsC;YACtE,MAAA,IAAA,mKAAA,CAAA,oBAAA,CAAA;QACA,MAAM,UAAU,6CAA6C,QAAQ,cAAc,QAAQ,EAAE,QAAQ,YAAY,MAAM;QACvH,MAAM,UAAmB,CAAC,4CAAA,OAAA,CAAA,cAAA,UAAA,OAAA,CAAA,YAAA;QAC1B,IAAI,EAAA,KAAO,KAAA,CAAA,GAAS,aAAa;QAC7B,IAAA,MAAQ,CAAA,KAAM,IAAI,aAAA;YACtB,OAAA,CAAA,OAAA,GAAA;QACA,IAAI,OAAO,gBAAgB,aAAa;QACpC,IAAA,MAAQ,CAAA,YAAa,IAAI,aAAA;YAC7B,OAAA,CAAA,cAAA,GAAA;QACA,MAAM,MAAM,IAAI,IAAI,KAAK,OAAO,OAAO,WAAW,OAAO;QAEzD,MAAM,MAAA,IAAA,GAA2C,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,QAAA,GAAA;QAAA,EAC7C,IAAA,YAAgB,CAAA;YACpB,gBAAA;QAEA,OAAO,MAAM,KAAK,OAAO;QAAA,EACrB,KAAA,MAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CACA,OACA,KACA,YACJ;IACJ;IAAA;;;;;;;;;GAWA,GACI,EADE,IACE,OADS,AACF,IAAA,MADoB,EACpB,CAAa,CAAA,IADoC,EACpC,EAAA,IAAa;QACjC,IAAA,IAAM,GAAA,CAAI,YAAA,MAAkB,OAAA,iCAAwC;YACxE,MAAA,IAAA,mKAAA,CAAA,oBAAA,CAAA;QACA,IAAI,OAAO,WAAW,aAAa;QAC/B,IAAA,IAAM,GAAA,CAAI,UAAA,QAAkB,KAAA,iCAAsC;YACtE,MAAA,IAAA,mKAAA,CAAA,oBAAA,CAAA;QACA,MAAM,UAAU,6CAA6C,QAAQ,cAAc,QAAQ,EAAE,QAAQ,YAAY,MAAM;QACvH,MAAM,UAAmB,CAAC,4CAAA,OAAA,CAAA,cAAA,UAAA,OAAA,CAAA,YAAA;QAC1B,MAAM,MAAM,IAAI,CAAA,GAAI,KAAK,OAAO,OAAO,WAAW,OAAO;QAEzD,MAAM,MAAA,IAAA,GAA2C,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,QAAA,GAAA;QAAA,EAC7C,IAAA,YAAgB,CAAA;YACpB,gBAAA;QAEA,OAAO,MAAM,KAAK,OAAO;QAAA,EACrB,KAAA,MAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CACA,UACA,KACA,YACJ;IACJ;IAAA;;;;;;;;;GAWA,GACI,EADE,IACE,OAAO,KADO,IACP,IAAa,EADY,EACZ,EAAA,IADkD,EAClD,CAAa,CAAA;QACjC,IAAA,IAAM,GAAA,CAAI,YAAA,MAAkB,OAAA,iCAAwC;YACxE,MAAA,IAAA,mKAAA,CAAA,oBAAA,CAAA;QACA,IAAI,OAAO,WAAW,aAAa;QAC/B,IAAA,IAAM,GAAA,CAAI,UAAA,QAAkB,KAAA,iCAAsC;YACtE,MAAA,IAAA,mKAAA,CAAA,oBAAA,CAAA;QACA,MAAM,UAAU,sDAAsD,QAAQ,cAAc,QAAQ,EAAE,QAAQ,YAAY,MAAM;QAChI,MAAM,UAAmB,CAAC,qDAAA,OAAA,CAAA,cAAA,UAAA,OAAA,CAAA,YAAA;QAC1B,MAAM,MAAM,IAAI,CAAA,GAAI,KAAK,OAAO,OAAO,WAAW,OAAO;QAEzD,MAAM,MAAA,IAAA,GAA2C,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,QAAA,GAAA;QAAA,EAC7C,IAAA,YAAgB,CAAA;YACpB,gBAAA;QAEA,OAAO,MAAM,KAAK,OAAO;QAAA,EACrB,KAAA,MAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CACA,OACA,KACA,YACA,SACJ;IACJ;IAAA;;;;;;;;;;;;;;;;;;;;GAsBA,GACI,EADE,IACE,OAAO,IADM,IACN,KAAa,CADW,EACX,EAAA,IAD2B,EAC3B,EAAa,GAD8B,EAC9B,EAAA,IAD+C,EAC/C,EAAA,KADuE,EACvE,EAAA,KADyF,EACzF,EAAA,SAD+G,EAC/G,EAAA,SADqI,EACrI,EAAA,UAD4J,EAC5J,EAAA,KAD8K,EAC9K,EAAA,MADiM,EACjM,EAAA,QADsN,EACtN,EAAA,IADkQ,EAClQ,EAAA;QACjC,IAAA,IAAM,GAAA,CAAI,YAAA,MAAkB,OAAA,iCAAwC;YACxE,MAAA,IAAA,mKAAA,CAAA,oBAAA,CAAA;QACA,IAAI,OAAO,WAAW,aAAa;QAC/B,IAAA,IAAM,GAAA,CAAI,UAAA,QAAkB,KAAA,iCAAsC;YACtE,MAAA,IAAA,mKAAA,CAAA,oBAAA,CAAA;QACA,MAAM,UAAU,qDAAqD,QAAQ,cAAc,QAAQ,EAAE,QAAQ,YAAY,MAAM;QAC/H,MAAM,UAAmB,CAAC,oDAAA,OAAA,CAAA,cAAA,UAAA,OAAA,CAAA,YAAA;QAC1B,IAAI,EAAA,KAAO,KAAA,CAAA,IAAU,aAAa;QAC9B,IAAA,MAAQ,CAAA,MAAO,IAAI,aAAA;YACvB,OAAA,CAAA,QAAA,GAAA;QACA,IAAI,OAAO,WAAW,aAAa;QAC/B,IAAA,MAAQ,CAAA,OAAQ,IAAI,aAAA;YACxB,OAAA,CAAA,SAAA,GAAA;QACA,IAAI,OAAO,YAAY,aAAa;QAChC,IAAA,MAAQ,CAAA,QAAS,IAAI,aAAA;YACzB,OAAA,CAAA,UAAA,GAAA;QACA,IAAI,OAAO,YAAY,aAAa;QAChC,IAAA,MAAQ,CAAA,QAAS,IAAI,aAAA;YACzB,OAAA,CAAA,UAAA,GAAA;QACA,IAAI,OAAO,gBAAgB,aAAa;QACpC,IAAA,MAAQ,CAAA,YAAa,IAAI,aAAA;YAC7B,OAAA,CAAA,cAAA,GAAA;QACA,IAAI,OAAO,gBAAgB,aAAa;QACpC,IAAA,MAAQ,CAAA,YAAa,IAAI,aAAA;YAC7B,OAAA,CAAA,cAAA,GAAA;QACA,IAAI,OAAO,iBAAiB,aAAa;QACrC,IAAA,MAAQ,CAAA,aAAc,IAAI,aAAA;YAC9B,OAAA,CAAA,eAAA,GAAA;QACA,IAAI,OAAO,YAAY,aAAa;QAChC,IAAA,MAAQ,CAAA,QAAS,IAAI,aAAA;YACzB,OAAA,CAAA,UAAA,GAAA;QACA,IAAI,OAAO,aAAa,aAAa;QACjC,IAAA,MAAQ,CAAA,SAAU,IAAI,aAAA;YAC1B,OAAA,CAAA,WAAA,GAAA;QACA,IAAI,OAAO,eAAe,aAAa;QACnC,IAAA,MAAQ,CAAA,WAAY,IAAI,aAAA;YAC5B,OAAA,CAAA,aAAA,GAAA;QACA,IAAI,OAAO,WAAW,aAAa;QAC/B,IAAA,MAAQ,CAAA,OAAQ,IAAI,aAAA;YACxB,OAAA,CAAA,SAAA,GAAA;QACA,MAAM,MAAM,IAAI,IAAI,KAAK,OAAO,OAAO,WAAW,OAAO;QAEzD,MAAM,MAAA,IAAA,GAA2C,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,QAAA,GAAA;QAAA,EAC7C,IAAA,YAAgB,CAAA;YACpB,gBAAA;QAEA,OAAO,MAAM,KAAK,OAAO;QAAA,EACrB,KAAA,MAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CACA,OACA,KACA,YACA,SACJ;IACJ;IAAA;;;;;;;;;GAWA,GACI,EADE,IACE,OAAO,CADG,IACH,MADqB,EACR,EAAA,IAD8C,EAC9C,EAAA,GAAa;QACjC,IAAA,IAAM,GAAA,CAAI,YAAA,MAAkB,OAAA,iCAAwC;YACxE,MAAA,IAAA,mKAAA,CAAA,oBAAA,CAAA;QACA,IAAI,OAAO,WAAW,aAAa;QAC/B,IAAA,IAAM,GAAA,CAAI,UAAA,QAAkB,KAAA,iCAAsC;YACtE,MAAA,IAAA,mKAAA,CAAA,oBAAA,CAAA;QACA,MAAM,UAAU,kDAAkD,QAAQ,cAAc,QAAQ,EAAE,QAAQ,YAAY,MAAM;QAC5H,MAAM,UAAmB,CAAC,iDAAA,OAAA,CAAA,cAAA,UAAA,OAAA,CAAA,YAAA;QAC1B,MAAM,MAAM,IAAI,CAAA,GAAI,KAAK,OAAO,OAAO,WAAW,OAAO;QAEzD,MAAM,MAAA,IAAA,GAA2C,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,QAAA,GAAA;QAAA,EAC7C,IAAA,YAAgB,CAAA;YACpB,gBAAA;QAEA,OAAO,MAAM,KAAK,OAAO;QAAA,EACrB,KAAA,MAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CACA,OACA,KACA,YACA,SACJ;IAER","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7421, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/services/teams.ts"],"sourcesContent":["import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\n\nexport class Teams {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * List teams\n     *\n     * Get a list of all the teams in which the current user is a member. You can use the parameters to filter your results.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.TeamList<Preferences>>}\n     */\n    async list<Preferences extends Models.Preferences>(queries?: string[], search?: string): Promise<Models.TeamList<Preferences>> {\n        const apiPath = '/teams';\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create team\n     *\n     * Create a new team. The user who creates the team will automatically be assigned as the owner of the team. Only the users with the owner role can invite new members, add new owners and delete or update the team.\n     *\n     * @param {string} teamId\n     * @param {string} name\n     * @param {string[]} roles\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Team<Preferences>>}\n     */\n    async create<Preferences extends Models.Preferences>(teamId: string, name: string, roles?: string[]): Promise<Models.Team<Preferences>> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = '/teams';\n        const payload: Payload = {};\n        if (typeof teamId !== 'undefined') {\n            payload['teamId'] = teamId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        if (typeof roles !== 'undefined') {\n            payload['roles'] = roles;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get team\n     *\n     * Get a team by its ID. All team members have read access for this resource.\n     *\n     * @param {string} teamId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Team<Preferences>>}\n     */\n    async get<Preferences extends Models.Preferences>(teamId: string): Promise<Models.Team<Preferences>> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        const apiPath = '/teams/{teamId}'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update name\n     *\n     * Update the team&#039;s name by its unique ID.\n     *\n     * @param {string} teamId\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Team<Preferences>>}\n     */\n    async updateName<Preferences extends Models.Preferences>(teamId: string, name: string): Promise<Models.Team<Preferences>> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = '/teams/{teamId}'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete team\n     *\n     * Delete a team using its ID. Only team members with the owner role can delete the team.\n     *\n     * @param {string} teamId\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async delete(teamId: string): Promise<{}> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        const apiPath = '/teams/{teamId}'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List team memberships\n     *\n     * Use this endpoint to list a team&#039;s members using the team&#039;s ID. All team members have read access to this endpoint. Hide sensitive attributes from the response by toggling membership privacy in the Console.\n     *\n     * @param {string} teamId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MembershipList>}\n     */\n    async listMemberships(teamId: string, queries?: string[], search?: string): Promise<Models.MembershipList> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        const apiPath = '/teams/{teamId}/memberships'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create team membership\n     *\n     * Invite a new member to join your team. Provide an ID for existing users, or invite unregistered users using an email or phone number. If initiated from a Client SDK, Appwrite will send an email or sms with a link to join the team to the invited user, and an account will be created for them if one doesn&#039;t exist. If initiated from a Server SDK, the new member will be added automatically to the team.\n\nYou only need to provide one of a user ID, email, or phone number. Appwrite will prioritize accepting the user ID &gt; email &gt; phone number if you provide more than one of these parameters.\n\nUse the `url` parameter to redirect the user from the invitation email to your app. After the user is redirected, use the [Update Team Membership Status](https://appwrite.io/docs/references/cloud/client-web/teams#updateMembershipStatus) endpoint to allow the user to accept the invitation to the team. \n\nPlease note that to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) Appwrite will accept the only redirect URLs under the domains you have added as a platform on the Appwrite Console.\n\n     *\n     * @param {string} teamId\n     * @param {string[]} roles\n     * @param {string} email\n     * @param {string} userId\n     * @param {string} phone\n     * @param {string} url\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Membership>}\n     */\n    async createMembership(teamId: string, roles: string[], email?: string, userId?: string, phone?: string, url?: string, name?: string): Promise<Models.Membership> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof roles === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"roles\"');\n        }\n        const apiPath = '/teams/{teamId}/memberships'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof phone !== 'undefined') {\n            payload['phone'] = phone;\n        }\n        if (typeof roles !== 'undefined') {\n            payload['roles'] = roles;\n        }\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get team membership\n     *\n     * Get a team member by the membership unique id. All team members have read access for this resource. Hide sensitive attributes from the response by toggling membership privacy in the Console.\n     *\n     * @param {string} teamId\n     * @param {string} membershipId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Membership>}\n     */\n    async getMembership(teamId: string, membershipId: string): Promise<Models.Membership> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof membershipId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n        const apiPath = '/teams/{teamId}/memberships/{membershipId}'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update membership\n     *\n     * Modify the roles of a team member. Only team members with the owner role have access to this endpoint. Learn more about [roles and permissions](https://appwrite.io/docs/permissions).\n\n     *\n     * @param {string} teamId\n     * @param {string} membershipId\n     * @param {string[]} roles\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Membership>}\n     */\n    async updateMembership(teamId: string, membershipId: string, roles: string[]): Promise<Models.Membership> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof membershipId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n        if (typeof roles === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"roles\"');\n        }\n        const apiPath = '/teams/{teamId}/memberships/{membershipId}'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n        const payload: Payload = {};\n        if (typeof roles !== 'undefined') {\n            payload['roles'] = roles;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete team membership\n     *\n     * This endpoint allows a user to leave a team or for a team owner to delete the membership of any other team member. You can also use this endpoint to delete a user membership even if it is not accepted.\n     *\n     * @param {string} teamId\n     * @param {string} membershipId\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async deleteMembership(teamId: string, membershipId: string): Promise<{}> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof membershipId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n        const apiPath = '/teams/{teamId}/memberships/{membershipId}'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update team membership status\n     *\n     * Use this endpoint to allow a user to accept an invitation to join a team after being redirected back to your app from the invitation email received by the user.\n\nIf the request is successful, a session for the user is automatically created.\n\n     *\n     * @param {string} teamId\n     * @param {string} membershipId\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Membership>}\n     */\n    async updateMembershipStatus(teamId: string, membershipId: string, userId: string, secret: string): Promise<Models.Membership> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof membershipId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n        const apiPath = '/teams/{teamId}/memberships/{membershipId}/status'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get team preferences\n     *\n     * Get the team&#039;s shared preferences by its unique ID. If a preference doesn&#039;t need to be shared by all team members, prefer storing them in [user preferences](https://appwrite.io/docs/references/cloud/client-web/account#getPrefs).\n     *\n     * @param {string} teamId\n     * @throws {AppwriteException}\n     * @returns {Promise<Preferences>}\n     */\n    async getPrefs<Preferences extends Models.Preferences>(teamId: string): Promise<Preferences> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        const apiPath = '/teams/{teamId}/prefs'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update preferences\n     *\n     * Update the team&#039;s preferences by its unique ID. The object you pass is stored as is and replaces any previous value. The maximum allowed prefs size is 64kB and throws an error if exceeded.\n     *\n     * @param {string} teamId\n     * @param {object} prefs\n     * @throws {AppwriteException}\n     * @returns {Promise<Preferences>}\n     */\n    async updatePrefs<Preferences extends Models.Preferences>(teamId: string, prefs: object): Promise<Preferences> {\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof prefs === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"prefs\"');\n        }\n        const apiPath = '/teams/{teamId}/prefs'.replace('{teamId}', teamId);\n        const payload: Payload = {};\n        if (typeof prefs !== 'undefined') {\n            payload['prefs'] = prefs;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7817, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/services/users.ts"],"sourcesContent":["import { AppwriteException, Client, type Payload, UploadProgress } from '../client';\nimport type { Models } from '../models';\nimport { PasswordHash } from '../enums/password-hash';\nimport { AuthenticatorType } from '../enums/authenticator-type';\nimport { MessagingProviderType } from '../enums/messaging-provider-type';\n\nexport class Users {\n    client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n\n    /**\n     * List users\n     *\n     * Get a list of all the project&#039;s users. You can use the query params to filter your results.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.UserList<Preferences>>}\n     */\n    async list<Preferences extends Models.Preferences>(queries?: string[], search?: string): Promise<Models.UserList<Preferences>> {\n        const apiPath = '/users';\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create user\n     *\n     * Create a new user.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} phone\n     * @param {string} password\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async create<Preferences extends Models.Preferences>(userId: string, email?: string, phone?: string, password?: string, name?: string): Promise<Models.User<Preferences>> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = '/users';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof phone !== 'undefined') {\n            payload['phone'] = phone;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create user with Argon2 password\n     *\n     * Create a new user. Password provided must be hashed with the [Argon2](https://en.wikipedia.org/wiki/Argon2) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async createArgon2User<Preferences extends Models.Preferences>(userId: string, email: string, password: string, name?: string): Promise<Models.User<Preferences>> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        const apiPath = '/users/argon2';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create user with bcrypt password\n     *\n     * Create a new user. Password provided must be hashed with the [Bcrypt](https://en.wikipedia.org/wiki/Bcrypt) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async createBcryptUser<Preferences extends Models.Preferences>(userId: string, email: string, password: string, name?: string): Promise<Models.User<Preferences>> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        const apiPath = '/users/bcrypt';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List identities\n     *\n     * Get identities for all users.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.IdentityList>}\n     */\n    async listIdentities(queries?: string[], search?: string): Promise<Models.IdentityList> {\n        const apiPath = '/users/identities';\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete identity\n     *\n     * Delete an identity by its unique ID.\n     *\n     * @param {string} identityId\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async deleteIdentity(identityId: string): Promise<{}> {\n        if (typeof identityId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"identityId\"');\n        }\n        const apiPath = '/users/identities/{identityId}'.replace('{identityId}', identityId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create user with MD5 password\n     *\n     * Create a new user. Password provided must be hashed with the [MD5](https://en.wikipedia.org/wiki/MD5) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async createMD5User<Preferences extends Models.Preferences>(userId: string, email: string, password: string, name?: string): Promise<Models.User<Preferences>> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        const apiPath = '/users/md5';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create user with PHPass password\n     *\n     * Create a new user. Password provided must be hashed with the [PHPass](https://www.openwall.com/phpass/) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async createPHPassUser<Preferences extends Models.Preferences>(userId: string, email: string, password: string, name?: string): Promise<Models.User<Preferences>> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        const apiPath = '/users/phpass';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create user with Scrypt password\n     *\n     * Create a new user. Password provided must be hashed with the [Scrypt](https://github.com/Tarsnap/scrypt) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} passwordSalt\n     * @param {number} passwordCpu\n     * @param {number} passwordMemory\n     * @param {number} passwordParallel\n     * @param {number} passwordLength\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async createScryptUser<Preferences extends Models.Preferences>(userId: string, email: string, password: string, passwordSalt: string, passwordCpu: number, passwordMemory: number, passwordParallel: number, passwordLength: number, name?: string): Promise<Models.User<Preferences>> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        if (typeof passwordSalt === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordSalt\"');\n        }\n        if (typeof passwordCpu === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordCpu\"');\n        }\n        if (typeof passwordMemory === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordMemory\"');\n        }\n        if (typeof passwordParallel === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordParallel\"');\n        }\n        if (typeof passwordLength === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordLength\"');\n        }\n        const apiPath = '/users/scrypt';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof passwordSalt !== 'undefined') {\n            payload['passwordSalt'] = passwordSalt;\n        }\n        if (typeof passwordCpu !== 'undefined') {\n            payload['passwordCpu'] = passwordCpu;\n        }\n        if (typeof passwordMemory !== 'undefined') {\n            payload['passwordMemory'] = passwordMemory;\n        }\n        if (typeof passwordParallel !== 'undefined') {\n            payload['passwordParallel'] = passwordParallel;\n        }\n        if (typeof passwordLength !== 'undefined') {\n            payload['passwordLength'] = passwordLength;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create user with Scrypt modified password\n     *\n     * Create a new user. Password provided must be hashed with the [Scrypt Modified](https://gist.github.com/Meldiron/eecf84a0225eccb5a378d45bb27462cc) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} passwordSalt\n     * @param {string} passwordSaltSeparator\n     * @param {string} passwordSignerKey\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async createScryptModifiedUser<Preferences extends Models.Preferences>(userId: string, email: string, password: string, passwordSalt: string, passwordSaltSeparator: string, passwordSignerKey: string, name?: string): Promise<Models.User<Preferences>> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        if (typeof passwordSalt === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordSalt\"');\n        }\n        if (typeof passwordSaltSeparator === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordSaltSeparator\"');\n        }\n        if (typeof passwordSignerKey === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordSignerKey\"');\n        }\n        const apiPath = '/users/scrypt-modified';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof passwordSalt !== 'undefined') {\n            payload['passwordSalt'] = passwordSalt;\n        }\n        if (typeof passwordSaltSeparator !== 'undefined') {\n            payload['passwordSaltSeparator'] = passwordSaltSeparator;\n        }\n        if (typeof passwordSignerKey !== 'undefined') {\n            payload['passwordSignerKey'] = passwordSignerKey;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create user with SHA password\n     *\n     * Create a new user. Password provided must be hashed with the [SHA](https://en.wikipedia.org/wiki/Secure_Hash_Algorithm) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {PasswordHash} passwordVersion\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async createSHAUser<Preferences extends Models.Preferences>(userId: string, email: string, password: string, passwordVersion?: PasswordHash, name?: string): Promise<Models.User<Preferences>> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        const apiPath = '/users/sha';\n        const payload: Payload = {};\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        if (typeof passwordVersion !== 'undefined') {\n            payload['passwordVersion'] = passwordVersion;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get user\n     *\n     * Get a user by its unique ID.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async get<Preferences extends Models.Preferences>(userId: string): Promise<Models.User<Preferences>> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = '/users/{userId}'.replace('{userId}', userId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete user\n     *\n     * Delete a user by its unique ID, thereby releasing it&#039;s ID. Since ID is released and can be reused, all user-related resources like documents or storage files should be deleted before user deletion. If you want to keep ID reserved, use the [updateStatus](https://appwrite.io/docs/server/users#usersUpdateStatus) endpoint instead.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async delete(userId: string): Promise<{}> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = '/users/{userId}'.replace('{userId}', userId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update email\n     *\n     * Update the user email by its unique ID.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async updateEmail<Preferences extends Models.Preferences>(userId: string, email: string): Promise<Models.User<Preferences>> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n        const apiPath = '/users/{userId}/email'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create user JWT\n     *\n     * Use this endpoint to create a JSON Web Token for user by its unique ID. You can use the resulting JWT to authenticate on behalf of the user. The JWT secret will become invalid if the session it uses gets deleted.\n     *\n     * @param {string} userId\n     * @param {string} sessionId\n     * @param {number} duration\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Jwt>}\n     */\n    async createJWT(userId: string, sessionId?: string, duration?: number): Promise<Models.Jwt> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = '/users/{userId}/jwts'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof sessionId !== 'undefined') {\n            payload['sessionId'] = sessionId;\n        }\n        if (typeof duration !== 'undefined') {\n            payload['duration'] = duration;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update user labels\n     *\n     * Update the user labels by its unique ID. \n\nLabels can be used to grant access to resources. While teams are a way for user&#039;s to share access to a resource, labels can be defined by the developer to grant access without an invitation. See the [Permissions docs](https://appwrite.io/docs/permissions) for more info.\n     *\n     * @param {string} userId\n     * @param {string[]} labels\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async updateLabels<Preferences extends Models.Preferences>(userId: string, labels: string[]): Promise<Models.User<Preferences>> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof labels === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"labels\"');\n        }\n        const apiPath = '/users/{userId}/labels'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof labels !== 'undefined') {\n            payload['labels'] = labels;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List user logs\n     *\n     * Get the user activity logs list by its unique ID.\n     *\n     * @param {string} userId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.LogList>}\n     */\n    async listLogs(userId: string, queries?: string[]): Promise<Models.LogList> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = '/users/{userId}/logs'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List user memberships\n     *\n     * Get the user membership list by its unique ID.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MembershipList>}\n     */\n    async listMemberships(userId: string): Promise<Models.MembershipList> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = '/users/{userId}/memberships'.replace('{userId}', userId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update MFA\n     *\n     * Enable or disable MFA on a user account.\n     *\n     * @param {string} userId\n     * @param {boolean} mfa\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async updateMfa<Preferences extends Models.Preferences>(userId: string, mfa: boolean): Promise<Models.User<Preferences>> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof mfa === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"mfa\"');\n        }\n        const apiPath = '/users/{userId}/mfa'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof mfa !== 'undefined') {\n            payload['mfa'] = mfa;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete authenticator\n     *\n     * Delete an authenticator app.\n     *\n     * @param {string} userId\n     * @param {AuthenticatorType} type\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async deleteMfaAuthenticator<Preferences extends Models.Preferences>(userId: string, type: AuthenticatorType): Promise<Models.User<Preferences>> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n        const apiPath = '/users/{userId}/mfa/authenticators/{type}'.replace('{userId}', userId).replace('{type}', type);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List factors\n     *\n     * List the factors available on the account to be used as a MFA challange.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaFactors>}\n     */\n    async listMfaFactors(userId: string): Promise<Models.MfaFactors> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = '/users/{userId}/mfa/factors'.replace('{userId}', userId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get MFA recovery codes\n     *\n     * Get recovery codes that can be used as backup for MFA flow by User ID. Before getting codes, they must be generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaRecoveryCodes>}\n     */\n    async getMfaRecoveryCodes(userId: string): Promise<Models.MfaRecoveryCodes> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = '/users/{userId}/mfa/recovery-codes'.replace('{userId}', userId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Regenerate MFA recovery codes\n     *\n     * Regenerate recovery codes that can be used as backup for MFA flow by User ID. Before regenerating codes, they must be first generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaRecoveryCodes>}\n     */\n    async updateMfaRecoveryCodes(userId: string): Promise<Models.MfaRecoveryCodes> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = '/users/{userId}/mfa/recovery-codes'.replace('{userId}', userId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'put',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create MFA recovery codes\n     *\n     * Generate recovery codes used as backup for MFA flow for User ID. Recovery codes can be used as a MFA verification type in [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method by client SDK.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.MfaRecoveryCodes>}\n     */\n    async createMfaRecoveryCodes(userId: string): Promise<Models.MfaRecoveryCodes> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = '/users/{userId}/mfa/recovery-codes'.replace('{userId}', userId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update name\n     *\n     * Update the user name by its unique ID.\n     *\n     * @param {string} userId\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async updateName<Preferences extends Models.Preferences>(userId: string, name: string): Promise<Models.User<Preferences>> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = '/users/{userId}/name'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update password\n     *\n     * Update the user password by its unique ID.\n     *\n     * @param {string} userId\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async updatePassword<Preferences extends Models.Preferences>(userId: string, password: string): Promise<Models.User<Preferences>> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n        const apiPath = '/users/{userId}/password'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update phone\n     *\n     * Update the user phone by its unique ID.\n     *\n     * @param {string} userId\n     * @param {string} number\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async updatePhone<Preferences extends Models.Preferences>(userId: string, number: string): Promise<Models.User<Preferences>> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof number === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"number\"');\n        }\n        const apiPath = '/users/{userId}/phone'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof number !== 'undefined') {\n            payload['number'] = number;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get user preferences\n     *\n     * Get the user preferences by its unique ID.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise<Preferences>}\n     */\n    async getPrefs<Preferences extends Models.Preferences>(userId: string): Promise<Preferences> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = '/users/{userId}/prefs'.replace('{userId}', userId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update user preferences\n     *\n     * Update the user preferences by its unique ID. The object you pass is stored as is, and replaces any previous value. The maximum allowed prefs size is 64kB and throws error if exceeded.\n     *\n     * @param {string} userId\n     * @param {object} prefs\n     * @throws {AppwriteException}\n     * @returns {Promise<Preferences>}\n     */\n    async updatePrefs<Preferences extends Models.Preferences>(userId: string, prefs: object): Promise<Preferences> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof prefs === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"prefs\"');\n        }\n        const apiPath = '/users/{userId}/prefs'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof prefs !== 'undefined') {\n            payload['prefs'] = prefs;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List user sessions\n     *\n     * Get the user sessions list by its unique ID.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.SessionList>}\n     */\n    async listSessions(userId: string): Promise<Models.SessionList> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = '/users/{userId}/sessions'.replace('{userId}', userId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create session\n     *\n     * Creates a session for a user. Returns an immediately usable session object.\n\nIf you want to generate a token for a custom authentication flow, use the [POST /users/{userId}/tokens](https://appwrite.io/docs/server/users#createToken) endpoint.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Session>}\n     */\n    async createSession(userId: string): Promise<Models.Session> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = '/users/{userId}/sessions'.replace('{userId}', userId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete user sessions\n     *\n     * Delete all user&#039;s sessions by using the user&#039;s unique ID.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async deleteSessions(userId: string): Promise<{}> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = '/users/{userId}/sessions'.replace('{userId}', userId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete user session\n     *\n     * Delete a user sessions by its unique ID.\n     *\n     * @param {string} userId\n     * @param {string} sessionId\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async deleteSession(userId: string, sessionId: string): Promise<{}> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof sessionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n        const apiPath = '/users/{userId}/sessions/{sessionId}'.replace('{userId}', userId).replace('{sessionId}', sessionId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update user status\n     *\n     * Update the user status by its unique ID. Use this endpoint as an alternative to deleting a user if you want to keep user&#039;s ID reserved.\n     *\n     * @param {string} userId\n     * @param {boolean} status\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async updateStatus<Preferences extends Models.Preferences>(userId: string, status: boolean): Promise<Models.User<Preferences>> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof status === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"status\"');\n        }\n        const apiPath = '/users/{userId}/status'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof status !== 'undefined') {\n            payload['status'] = status;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * List user targets\n     *\n     * List the messaging targets that are associated with a user.\n     *\n     * @param {string} userId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.TargetList>}\n     */\n    async listTargets(userId: string, queries?: string[]): Promise<Models.TargetList> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = '/users/{userId}/targets'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create user target\n     *\n     * Create a messaging target.\n     *\n     * @param {string} userId\n     * @param {string} targetId\n     * @param {MessagingProviderType} providerType\n     * @param {string} identifier\n     * @param {string} providerId\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Target>}\n     */\n    async createTarget(userId: string, targetId: string, providerType: MessagingProviderType, identifier: string, providerId?: string, name?: string): Promise<Models.Target> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n        if (typeof providerType === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerType\"');\n        }\n        if (typeof identifier === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"identifier\"');\n        }\n        const apiPath = '/users/{userId}/targets'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof targetId !== 'undefined') {\n            payload['targetId'] = targetId;\n        }\n        if (typeof providerType !== 'undefined') {\n            payload['providerType'] = providerType;\n        }\n        if (typeof identifier !== 'undefined') {\n            payload['identifier'] = identifier;\n        }\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Get user target\n     *\n     * Get a user&#039;s push notification target by ID.\n     *\n     * @param {string} userId\n     * @param {string} targetId\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Target>}\n     */\n    async getTarget(userId: string, targetId: string): Promise<Models.Target> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n        const apiPath = '/users/{userId}/targets/{targetId}'.replace('{userId}', userId).replace('{targetId}', targetId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'get',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update user target\n     *\n     * Update a messaging target.\n     *\n     * @param {string} userId\n     * @param {string} targetId\n     * @param {string} identifier\n     * @param {string} providerId\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Target>}\n     */\n    async updateTarget(userId: string, targetId: string, identifier?: string, providerId?: string, name?: string): Promise<Models.Target> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n        const apiPath = '/users/{userId}/targets/{targetId}'.replace('{userId}', userId).replace('{targetId}', targetId);\n        const payload: Payload = {};\n        if (typeof identifier !== 'undefined') {\n            payload['identifier'] = identifier;\n        }\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Delete user target\n     *\n     * Delete a messaging target.\n     *\n     * @param {string} userId\n     * @param {string} targetId\n     * @throws {AppwriteException}\n     * @returns {Promise<{}>}\n     */\n    async deleteTarget(userId: string, targetId: string): Promise<{}> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n        const apiPath = '/users/{userId}/targets/{targetId}'.replace('{userId}', userId).replace('{targetId}', targetId);\n        const payload: Payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'delete',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Create token\n     *\n     * Returns a token with a secret key for creating a session. Use the user ID and secret and submit a request to the [PUT /account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process.\n\n     *\n     * @param {string} userId\n     * @param {number} length\n     * @param {number} expire\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.Token>}\n     */\n    async createToken(userId: string, length?: number, expire?: number): Promise<Models.Token> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = '/users/{userId}/tokens'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof length !== 'undefined') {\n            payload['length'] = length;\n        }\n        if (typeof expire !== 'undefined') {\n            payload['expire'] = expire;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'post',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update email verification\n     *\n     * Update the user email verification status by its unique ID.\n     *\n     * @param {string} userId\n     * @param {boolean} emailVerification\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async updateEmailVerification<Preferences extends Models.Preferences>(userId: string, emailVerification: boolean): Promise<Models.User<Preferences>> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof emailVerification === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"emailVerification\"');\n        }\n        const apiPath = '/users/{userId}/verification'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof emailVerification !== 'undefined') {\n            payload['emailVerification'] = emailVerification;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n    /**\n     * Update phone verification\n     *\n     * Update the user phone verification status by its unique ID.\n     *\n     * @param {string} userId\n     * @param {boolean} phoneVerification\n     * @throws {AppwriteException}\n     * @returns {Promise<Models.User<Preferences>>}\n     */\n    async updatePhoneVerification<Preferences extends Models.Preferences>(userId: string, phoneVerification: boolean): Promise<Models.User<Preferences>> {\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof phoneVerification === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"phoneVerification\"');\n        }\n        const apiPath = '/users/{userId}/verification/phone'.replace('{userId}', userId);\n        const payload: Payload = {};\n        if (typeof phoneVerification !== 'undefined') {\n            payload['phoneVerification'] = phoneVerification;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n\n        const apiHeaders: { [header: string]: string } = {\n            'content-type': 'application/json',\n        }\n\n        return await this.client.call(\n            'patch',\n            uri,\n            apiHeaders,\n            payload,\n        );\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9072, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/permission.ts"],"sourcesContent":["/**\n * Helper class to generate permission strings for resources.\n */\nexport class Permission {\n    /**\n     * Generate read permission string for the provided role.\n     *\n     * @param {string} role\n     * @returns {string}\n     */\n    static read = (role: string): string => {\n        return `read(\"${role}\")`;\n    }\n\n    /**\n     * Generate write permission string for the provided role.\n     *\n     * This is an alias of update, delete, and possibly create.\n     * Don't use write in combination with update, delete, or create.\n     *\n     * @param {string} role\n     * @returns {string}\n     */\n    static write = (role: string): string => {\n        return `write(\"${role}\")`;\n    }\n\n    /**\n     * Generate create permission string for the provided role.\n     *\n     * @param {string} role\n     * @returns {string}\n     */\n    static create = (role: string): string => {\n        return `create(\"${role}\")`;\n    }\n\n    /**\n     * Generate update permission string for the provided role.\n     *\n     * @param {string} role\n     * @returns {string}\n     */\n    static update = (role: string): string => {\n        return `update(\"${role}\")`;\n    }\n\n    /**\n     * Generate delete permission string for the provided role.\n     *\n     * @param {string} role\n     * @returns {string}\n     */\n    static delete = (role: string): string => {\n        return `delete(\"${role}\")`;\n    }\n}\n"],"names":[],"mappings":";;;;AAGO,IAAM,aAAN,MAAiB;AAqDxB;AAAA;;;;;CAAA,GArDa,WAOF,IAAA,GAAO,CAAC,SAAyB;IACpC,OAAO,CAAA,MAAA,EAAS,IAAI,CAAA,EAAA,CAAA;AACxB;AAAA;;;;;;;;CAAA,GATS,WAoBF,KAAA,GAAQ,CAAC,SAAyB;IACrC,OAAO,CAAA,OAAA,EAAU,IAAI,CAAA,EAAA,CAAA;AACzB;AAAA;;;;;CAAA,GAtBS,WA8BF,MAAA,GAAS,CAAC,SAAyB;IACtC,OAAO,CAAA,QAAA,EAAW,IAAI,CAAA,EAAA,CAAA;AAC1B;AAAA;;;;;CAAA,GAhCS,WAwCF,MAAA,GAAS,CAAC,SAAyB;IACtC,OAAO,CAAA,QAAA,EAAW,IAAI,CAAA,EAAA,CAAA;AAC1B;AAAA;;;;;CAAA,GA1CS,WAkDF,MAAA,GAAS,CAAC,SAAyB;IACtC,OAAO,CAAA,QAAA,EAAW,IAAI,CAAA,EAAA,CAAA;AAC1B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9130, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/role.ts"],"sourcesContent":["/**\n * Helper class to generate role strings for `Permission`.\n */\nexport class Role {\n\n    /**\n     * Grants access to anyone.\n     * \n     * This includes authenticated and unauthenticated users.\n     * \n     * @returns {string}\n     */\n    public static any(): string {\n        return 'any'\n    }\n\n    /**\n     * Grants access to a specific user by user ID.\n     * \n     * You can optionally pass verified or unverified for\n     * `status` to target specific types of users.\n     *\n     * @param {string} id \n     * @param {string} status \n     * @returns {string}\n     */\n    public static user(id: string, status: string = ''): string {\n        if (status === '') {\n            return `user:${id}`\n        }\n        return `user:${id}/${status}`\n    }\n\n    /**\n     * Grants access to any authenticated or anonymous user.\n     * \n     * You can optionally pass verified or unverified for\n     * `status` to target specific types of users.\n     * \n     * @param {string} status \n     * @returns {string}\n     */\n    public static users(status: string = ''): string {\n        if (status === '') {\n            return 'users'\n        }\n        return `users/${status}`\n    }\n\n    /**\n     * Grants access to any guest user without a session.\n     * \n     * Authenticated users don't have access to this role.\n     * \n     * @returns {string}\n     */\n    public static guests(): string {\n        return 'guests'\n    }\n\n    /**\n     * Grants access to a team by team ID.\n     * \n     * You can optionally pass a role for `role` to target\n     * team members with the specified role.\n     * \n     * @param {string} id \n     * @param {string} role \n     * @returns {string}\n     */\n    public static team(id: string, role: string = ''): string {\n        if (role === '') {\n            return `team:${id}`\n        }\n        return `team:${id}/${role}`\n    }\n\n    /**\n     * Grants access to a specific member of a team.\n     * \n     * When the member is removed from the team, they will\n     * no longer have access.\n     * \n     * @param {string} id \n     * @returns {string}\n     */\n    public static member(id: string): string {\n        return `member:${id}`\n    }\n\n    /**\n     * Grants access to a user with the specified label.\n     * \n     * @param {string} name \n     * @returns  {string}\n     */\n    public static label(name: string): string {\n        return `label:${name}`\n    }\n}"],"names":[],"mappings":";;;;AAGO,IAAM,OAAN,MAAW;IAAA;;;;;;GAAA,GASd,OAAc,MAAc;QACxB,OAAO;IACX;IAAA;;;;;;;;;GAAA,GAYA,OAAc,KAAK,EAAA,EAAY,SAAiB,EAAA,EAAY;QACxD,IAAI,WAAW,IAAI;YACf,OAAO,CAAA,KAAA,EAAQ,EAAE,EAAA;QACrB;QACA,OAAO,CAAA,KAAA,EAAQ,EAAE,CAAA,CAAA,EAAI,MAAM,EAAA;IAC/B;IAAA;;;;;;;;GAAA,GAWA,OAAc,MAAM,SAAiB,EAAA,EAAY;QAC7C,IAAI,WAAW,IAAI;YACf,OAAO;QACX;QACA,OAAO,CAAA,MAAA,EAAS,MAAM,EAAA;IAC1B;IAAA;;;;;;GAAA,GASA,OAAc,SAAiB;QAC3B,OAAO;IACX;IAAA;;;;;;;;;GAAA,GAYA,OAAc,KAAK,EAAA,EAAY,OAAe,EAAA,EAAY;QACtD,IAAI,SAAS,IAAI;YACb,OAAO,CAAA,KAAA,EAAQ,EAAE,EAAA;QACrB;QACA,OAAO,CAAA,KAAA,EAAQ,EAAE,CAAA,CAAA,EAAI,IAAI,EAAA;IAC7B;IAAA;;;;;;;;GAAA,GAWA,OAAc,OAAO,EAAA,EAAoB;QACrC,OAAO,CAAA,OAAA,EAAU,EAAE,EAAA;IACvB;IAAA;;;;;GAAA,GAQA,OAAc,MAAM,IAAA,EAAsB;QACtC,OAAO,CAAA,MAAA,EAAS,IAAI,EAAA;IACxB;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9226, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/id.ts"],"sourcesContent":["/**\n * Helper class to generate ID strings for resources.\n */\nexport class ID {\n    /**\n     * Generate an hex ID based on timestamp.\n     * Recreated from https://www.php.net/manual/en/function.uniqid.php\n     *\n     * @returns {string}\n     */\n    static #hexTimestamp(): string {\n        const now = new Date();\n        const sec = Math.floor(now.getTime() / 1000);\n        const msec = now.getMilliseconds();\n\n        // Convert to hexadecimal\n        const hexTimestamp = sec.toString(16) + msec.toString(16).padStart(5, '0');\n        return hexTimestamp;\n    }\n\n    /**\n     * Uses the provided ID as the ID for the resource.\n     *\n     * @param {string} id\n     * @returns {string}\n     */\n    public static custom(id: string): string {\n        return id\n    }\n\n    /**\n     * Have Appwrite generate a unique ID for you.\n     * \n     * @param {number} padding. Default is 7.\n     * @returns {string}\n     */\n    public static unique(padding: number = 7): string {\n        // Generate a unique ID with padding to have a longer ID\n        const baseId = ID.#hexTimestamp();\n        let randomPadding = '';\n        for (let i = 0; i < padding; i++) {\n            const randomHexDigit = Math.floor(Math.random() * 16).toString(16);\n            randomPadding += randomHexDigit;\n        }\n        return baseId + randomPadding;\n    }\n}\n"],"names":[],"mappings":";;;;AAGO,IAAM,KAAN,MAAM,IAAG;IAAA;;;;;GAAA,GAOZ,QAAO,YAAA,GAAwB;QAC3B,MAAM,MAAM,aAAA,GAAA,IAAI,KAAK;QACrB,MAAM,MAAM,KAAK,KAAA,CAAM,IAAI,OAAA,CAAQ,IAAI,GAAI;QAC3C,MAAM,OAAO,IAAI,eAAA,CAAgB;QAGjC,MAAM,eAAe,IAAI,QAAA,CAAS,EAAE,IAAI,KAAK,QAAA,CAAS,EAAE,EAAE,QAAA,CAAS,GAAG,GAAG;QACzE,OAAO;IACX;IAAA;;;;;GAAA,GAQA,OAAc,OAAO,EAAA,EAAoB;QACrC,OAAO;IACX;IAAA;;;;;GAAA,GAQA,OAAc,OAAO,UAAkB,CAAA,EAAW;QAE9C,MAAM,SAAS,KAAG,YAAA,CAAc;QAChC,IAAI,gBAAgB;QACpB,IAAA,IAAS,IAAI,GAAG,IAAI,SAAS,IAAK;YAC9B,MAAM,iBAAiB,KAAK,KAAA,CAAM,KAAK,MAAA,CAAO,IAAI,EAAE,EAAE,QAAA,CAAS,EAAE;YACjE,iBAAiB;QACrB;QACA,OAAO,SAAS;IACpB;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9275, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/enums/authenticator-type.ts"],"sourcesContent":["export enum AuthenticatorType {\n    Totp = 'totp',\n}"],"names":["AuthenticatorType"],"mappings":";;;;AAAO,IAAK,oBAAL,aAAA,GAAA,CAAA,CAAKA,uBAAL;IACHA,kBAAAA,CAAA,OAAA,GAAO;IADC,OAAAA;AAAA,CAAA,EAAA,qBAAA,CAAA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9292, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/enums/authentication-factor.ts"],"sourcesContent":["export enum AuthenticationFactor {\n    Email = 'email',\n    Phone = 'phone',\n    Totp = 'totp',\n    Recoverycode = 'recoverycode',\n}"],"names":["AuthenticationFactor"],"mappings":";;;;AAAO,IAAK,uBAAL,aAAA,GAAA,CAAA,CAAKA,0BAAL;IACHA,qBAAAA,CAAA,QAAA,GAAQ;IACRA,qBAAAA,CAAA,QAAA,GAAQ;IACRA,qBAAAA,CAAA,OAAA,GAAO;IACPA,qBAAAA,CAAA,eAAA,GAAe;IAJP,OAAAA;AAAA,CAAA,EAAA,wBAAA,CAAA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9312, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/enums/o-auth-provider.ts"],"sourcesContent":["export enum OAuthProvider {\n    Amazon = 'amazon',\n    Apple = 'apple',\n    Auth0 = 'auth0',\n    Authentik = 'authentik',\n    Autodesk = 'autodesk',\n    Bitbucket = 'bitbucket',\n    Bitly = 'bitly',\n    Box = 'box',\n    Dailymotion = 'dailymotion',\n    Discord = 'discord',\n    Disqus = 'disqus',\n    Dropbox = 'dropbox',\n    Etsy = 'etsy',\n    Facebook = 'facebook',\n    Github = 'github',\n    Gitlab = 'gitlab',\n    Google = 'google',\n    Linkedin = 'linkedin',\n    Microsoft = 'microsoft',\n    Notion = 'notion',\n    Oidc = 'oidc',\n    Okta = 'okta',\n    Paypal = 'paypal',\n    PaypalSandbox = 'paypalSandbox',\n    Podio = 'podio',\n    Salesforce = 'salesforce',\n    Slack = 'slack',\n    Spotify = 'spotify',\n    Stripe = 'stripe',\n    Tradeshift = 'tradeshift',\n    TradeshiftBox = 'tradeshiftBox',\n    Twitch = 'twitch',\n    Wordpress = 'wordpress',\n    Yahoo = 'yahoo',\n    Yammer = 'yammer',\n    Yandex = 'yandex',\n    Zoho = 'zoho',\n    Zoom = 'zoom',\n    Mock = 'mock',\n}"],"names":["OAuthProvider"],"mappings":";;;;AAAO,IAAK,gBAAL,aAAA,GAAA,CAAA,CAAKA,mBAAL;IACHA,cAAAA,CAAA,SAAA,GAAS;IACTA,cAAAA,CAAA,QAAA,GAAQ;IACRA,cAAAA,CAAA,QAAA,GAAQ;IACRA,cAAAA,CAAA,YAAA,GAAY;IACZA,cAAAA,CAAA,WAAA,GAAW;IACXA,cAAAA,CAAA,YAAA,GAAY;IACZA,cAAAA,CAAA,QAAA,GAAQ;IACRA,cAAAA,CAAA,MAAA,GAAM;IACNA,cAAAA,CAAA,cAAA,GAAc;IACdA,cAAAA,CAAA,UAAA,GAAU;IACVA,cAAAA,CAAA,SAAA,GAAS;IACTA,cAAAA,CAAA,UAAA,GAAU;IACVA,cAAAA,CAAA,OAAA,GAAO;IACPA,cAAAA,CAAA,WAAA,GAAW;IACXA,cAAAA,CAAA,SAAA,GAAS;IACTA,cAAAA,CAAA,SAAA,GAAS;IACTA,cAAAA,CAAA,SAAA,GAAS;IACTA,cAAAA,CAAA,WAAA,GAAW;IACXA,cAAAA,CAAA,YAAA,GAAY;IACZA,cAAAA,CAAA,SAAA,GAAS;IACTA,cAAAA,CAAA,OAAA,GAAO;IACPA,cAAAA,CAAA,OAAA,GAAO;IACPA,cAAAA,CAAA,SAAA,GAAS;IACTA,cAAAA,CAAA,gBAAA,GAAgB;IAChBA,cAAAA,CAAA,QAAA,GAAQ;IACRA,cAAAA,CAAA,aAAA,GAAa;IACbA,cAAAA,CAAA,QAAA,GAAQ;IACRA,cAAAA,CAAA,UAAA,GAAU;IACVA,cAAAA,CAAA,SAAA,GAAS;IACTA,cAAAA,CAAA,aAAA,GAAa;IACbA,cAAAA,CAAA,gBAAA,GAAgB;IAChBA,cAAAA,CAAA,SAAA,GAAS;IACTA,cAAAA,CAAA,YAAA,GAAY;IACZA,cAAAA,CAAA,QAAA,GAAQ;IACRA,cAAAA,CAAA,SAAA,GAAS;IACTA,cAAAA,CAAA,SAAA,GAAS;IACTA,cAAAA,CAAA,OAAA,GAAO;IACPA,cAAAA,CAAA,OAAA,GAAO;IACPA,cAAAA,CAAA,OAAA,GAAO;IAvCC,OAAAA;AAAA,CAAA,EAAA,iBAAA,CAAA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9367, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/enums/browser.ts"],"sourcesContent":["export enum Browser {\n    AvantBrowser = 'aa',\n    AndroidWebViewBeta = 'an',\n    GoogleChrome = 'ch',\n    GoogleChromeIOS = 'ci',\n    GoogleChromeMobile = 'cm',\n    Chromium = 'cr',\n    MozillaFirefox = 'ff',\n    Safari = 'sf',\n    MobileSafari = 'mf',\n    MicrosoftEdge = 'ps',\n    MicrosoftEdgeIOS = 'oi',\n    OperaMini = 'om',\n    Opera = 'op',\n    OperaNext = 'on',\n}"],"names":["Browser"],"mappings":";;;;AAAO,IAAK,UAAL,aAAA,GAAA,CAAA,CAAKA,aAAL;IACHA,QAAAA,CAAA,eAAA,GAAe;IACfA,QAAAA,CAAA,qBAAA,GAAqB;IACrBA,QAAAA,CAAA,eAAA,GAAe;IACfA,QAAAA,CAAA,kBAAA,GAAkB;IAClBA,QAAAA,CAAA,qBAAA,GAAqB;IACrBA,QAAAA,CAAA,WAAA,GAAW;IACXA,QAAAA,CAAA,iBAAA,GAAiB;IACjBA,QAAAA,CAAA,SAAA,GAAS;IACTA,QAAAA,CAAA,eAAA,GAAe;IACfA,QAAAA,CAAA,gBAAA,GAAgB;IAChBA,QAAAA,CAAA,mBAAA,GAAmB;IACnBA,QAAAA,CAAA,YAAA,GAAY;IACZA,QAAAA,CAAA,QAAA,GAAQ;IACRA,QAAAA,CAAA,YAAA,GAAY;IAdJ,OAAAA;AAAA,CAAA,EAAA,WAAA,CAAA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9397, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/enums/credit-card.ts"],"sourcesContent":["export enum CreditCard {\n    AmericanExpress = 'amex',\n    Argencard = 'argencard',\n    Cabal = 'cabal',\n    Cencosud = 'cencosud',\n    DinersClub = 'diners',\n    Discover = 'discover',\n    Elo = 'elo',\n    Hipercard = 'hipercard',\n    JCB = 'jcb',\n    Mastercard = 'mastercard',\n    Naranja = 'naranja',\n    TarjetaShopping = 'targeta-shopping',\n    UnionChinaPay = 'union-china-pay',\n    Visa = 'visa',\n    MIR = 'mir',\n    Maestro = 'maestro',\n}"],"names":["CreditCard"],"mappings":";;;;AAAO,IAAK,aAAL,aAAA,GAAA,CAAA,CAAKA,gBAAL;IACHA,WAAAA,CAAA,kBAAA,GAAkB;IAClBA,WAAAA,CAAA,YAAA,GAAY;IACZA,WAAAA,CAAA,QAAA,GAAQ;IACRA,WAAAA,CAAA,WAAA,GAAW;IACXA,WAAAA,CAAA,aAAA,GAAa;IACbA,WAAAA,CAAA,WAAA,GAAW;IACXA,WAAAA,CAAA,MAAA,GAAM;IACNA,WAAAA,CAAA,YAAA,GAAY;IACZA,WAAAA,CAAA,MAAA,GAAM;IACNA,WAAAA,CAAA,aAAA,GAAa;IACbA,WAAAA,CAAA,UAAA,GAAU;IACVA,WAAAA,CAAA,kBAAA,GAAkB;IAClBA,WAAAA,CAAA,gBAAA,GAAgB;IAChBA,WAAAA,CAAA,OAAA,GAAO;IACPA,WAAAA,CAAA,MAAA,GAAM;IACNA,WAAAA,CAAA,UAAA,GAAU;IAhBF,OAAAA;AAAA,CAAA,EAAA,cAAA,CAAA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9429, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/enums/flag.ts"],"sourcesContent":["export enum Flag {\n    Afghanistan = 'af',\n    Angola = 'ao',\n    Albania = 'al',\n    Andorra = 'ad',\n    UnitedArabEmirates = 'ae',\n    Argentina = 'ar',\n    Armenia = 'am',\n    AntiguaAndBarbuda = 'ag',\n    Australia = 'au',\n    Austria = 'at',\n    Azerbaijan = 'az',\n    Burundi = 'bi',\n    Belgium = 'be',\n    Benin = 'bj',\n    BurkinaFaso = 'bf',\n    Bangladesh = 'bd',\n    Bulgaria = 'bg',\n    Bahrain = 'bh',\n    Bahamas = 'bs',\n    BosniaAndHerzegovina = 'ba',\n    Belarus = 'by',\n    Belize = 'bz',\n    Bolivia = 'bo',\n    Brazil = 'br',\n    Barbados = 'bb',\n    BruneiDarussalam = 'bn',\n    Bhutan = 'bt',\n    Botswana = 'bw',\n    CentralAfricanRepublic = 'cf',\n    Canada = 'ca',\n    Switzerland = 'ch',\n    Chile = 'cl',\n    China = 'cn',\n    CoteDIvoire = 'ci',\n    Cameroon = 'cm',\n    DemocraticRepublicOfTheCongo = 'cd',\n    RepublicOfTheCongo = 'cg',\n    Colombia = 'co',\n    Comoros = 'km',\n    CapeVerde = 'cv',\n    CostaRica = 'cr',\n    Cuba = 'cu',\n    Cyprus = 'cy',\n    CzechRepublic = 'cz',\n    Germany = 'de',\n    Djibouti = 'dj',\n    Dominica = 'dm',\n    Denmark = 'dk',\n    DominicanRepublic = 'do',\n    Algeria = 'dz',\n    Ecuador = 'ec',\n    Egypt = 'eg',\n    Eritrea = 'er',\n    Spain = 'es',\n    Estonia = 'ee',\n    Ethiopia = 'et',\n    Finland = 'fi',\n    Fiji = 'fj',\n    France = 'fr',\n    MicronesiaFederatedStatesOf = 'fm',\n    Gabon = 'ga',\n    UnitedKingdom = 'gb',\n    Georgia = 'ge',\n    Ghana = 'gh',\n    Guinea = 'gn',\n    Gambia = 'gm',\n    GuineaBissau = 'gw',\n    EquatorialGuinea = 'gq',\n    Greece = 'gr',\n    Grenada = 'gd',\n    Guatemala = 'gt',\n    Guyana = 'gy',\n    Honduras = 'hn',\n    Croatia = 'hr',\n    Haiti = 'ht',\n    Hungary = 'hu',\n    Indonesia = 'id',\n    India = 'in',\n    Ireland = 'ie',\n    IranIslamicRepublicOf = 'ir',\n    Iraq = 'iq',\n    Iceland = 'is',\n    Israel = 'il',\n    Italy = 'it',\n    Jamaica = 'jm',\n    Jordan = 'jo',\n    Japan = 'jp',\n    Kazakhstan = 'kz',\n    Kenya = 'ke',\n    Kyrgyzstan = 'kg',\n    Cambodia = 'kh',\n    Kiribati = 'ki',\n    SaintKittsAndNevis = 'kn',\n    SouthKorea = 'kr',\n    Kuwait = 'kw',\n    LaoPeopleSDemocraticRepublic = 'la',\n    Lebanon = 'lb',\n    Liberia = 'lr',\n    Libya = 'ly',\n    SaintLucia = 'lc',\n    Liechtenstein = 'li',\n    SriLanka = 'lk',\n    Lesotho = 'ls',\n    Lithuania = 'lt',\n    Luxembourg = 'lu',\n    Latvia = 'lv',\n    Morocco = 'ma',\n    Monaco = 'mc',\n    Moldova = 'md',\n    Madagascar = 'mg',\n    Maldives = 'mv',\n    Mexico = 'mx',\n    MarshallIslands = 'mh',\n    NorthMacedonia = 'mk',\n    Mali = 'ml',\n    Malta = 'mt',\n    Myanmar = 'mm',\n    Montenegro = 'me',\n    Mongolia = 'mn',\n    Mozambique = 'mz',\n    Mauritania = 'mr',\n    Mauritius = 'mu',\n    Malawi = 'mw',\n    Malaysia = 'my',\n    Namibia = 'na',\n    Niger = 'ne',\n    Nigeria = 'ng',\n    Nicaragua = 'ni',\n    Netherlands = 'nl',\n    Norway = 'no',\n    Nepal = 'np',\n    Nauru = 'nr',\n    NewZealand = 'nz',\n    Oman = 'om',\n    Pakistan = 'pk',\n    Panama = 'pa',\n    Peru = 'pe',\n    Philippines = 'ph',\n    Palau = 'pw',\n    PapuaNewGuinea = 'pg',\n    Poland = 'pl',\n    FrenchPolynesia = 'pf',\n    NorthKorea = 'kp',\n    Portugal = 'pt',\n    Paraguay = 'py',\n    Qatar = 'qa',\n    Romania = 'ro',\n    Russia = 'ru',\n    Rwanda = 'rw',\n    SaudiArabia = 'sa',\n    Sudan = 'sd',\n    Senegal = 'sn',\n    Singapore = 'sg',\n    SolomonIslands = 'sb',\n    SierraLeone = 'sl',\n    ElSalvador = 'sv',\n    SanMarino = 'sm',\n    Somalia = 'so',\n    Serbia = 'rs',\n    SouthSudan = 'ss',\n    SaoTomeAndPrincipe = 'st',\n    Suriname = 'sr',\n    Slovakia = 'sk',\n    Slovenia = 'si',\n    Sweden = 'se',\n    Eswatini = 'sz',\n    Seychelles = 'sc',\n    Syria = 'sy',\n    Chad = 'td',\n    Togo = 'tg',\n    Thailand = 'th',\n    Tajikistan = 'tj',\n    Turkmenistan = 'tm',\n    TimorLeste = 'tl',\n    Tonga = 'to',\n    TrinidadAndTobago = 'tt',\n    Tunisia = 'tn',\n    Turkey = 'tr',\n    Tuvalu = 'tv',\n    Tanzania = 'tz',\n    Uganda = 'ug',\n    Ukraine = 'ua',\n    Uruguay = 'uy',\n    UnitedStates = 'us',\n    Uzbekistan = 'uz',\n    VaticanCity = 'va',\n    SaintVincentAndTheGrenadines = 'vc',\n    Venezuela = 've',\n    Vietnam = 'vn',\n    Vanuatu = 'vu',\n    Samoa = 'ws',\n    Yemen = 'ye',\n    SouthAfrica = 'za',\n    Zambia = 'zm',\n    Zimbabwe = 'zw',\n}"],"names":["Flag"],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9640, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/enums/relationship-type.ts"],"sourcesContent":["export enum RelationshipType {\n    OneToOne = 'oneToOne',\n    ManyToOne = 'manyToOne',\n    ManyToMany = 'manyToMany',\n    OneToMany = 'oneToMany',\n}"],"names":["RelationshipType"],"mappings":";;;;AAAO,IAAK,mBAAL,aAAA,GAAA,CAAA,CAAKA,sBAAL;IACHA,iBAAAA,CAAA,WAAA,GAAW;IACXA,iBAAAA,CAAA,YAAA,GAAY;IACZA,iBAAAA,CAAA,aAAA,GAAa;IACbA,iBAAAA,CAAA,YAAA,GAAY;IAJJ,OAAAA;AAAA,CAAA,EAAA,oBAAA,CAAA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9660, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/enums/relation-mutate.ts"],"sourcesContent":["export enum RelationMutate {\n    Cascade = 'cascade',\n    Restrict = 'restrict',\n    SetNull = 'setNull',\n}"],"names":["RelationMutate"],"mappings":";;;;AAAO,IAAK,iBAAL,aAAA,GAAA,CAAA,CAAKA,oBAAL;IACHA,eAAAA,CAAA,UAAA,GAAU;IACVA,eAAAA,CAAA,WAAA,GAAW;IACXA,eAAAA,CAAA,UAAA,GAAU;IAHF,OAAAA;AAAA,CAAA,EAAA,kBAAA,CAAA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9679, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/enums/index-type.ts"],"sourcesContent":["export enum IndexType {\n    Key = 'key',\n    Fulltext = 'fulltext',\n    Unique = 'unique',\n}"],"names":["IndexType"],"mappings":";;;;AAAO,IAAK,YAAL,aAAA,GAAA,CAAA,CAAKA,eAAL;IACHA,UAAAA,CAAA,MAAA,GAAM;IACNA,UAAAA,CAAA,WAAA,GAAW;IACXA,UAAAA,CAAA,SAAA,GAAS;IAHD,OAAAA;AAAA,CAAA,EAAA,aAAA,CAAA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9698, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/enums/runtime.ts"],"sourcesContent":["export enum Runtime {\n    Node145 = 'node-14.5',\n    Node160 = 'node-16.0',\n    Node180 = 'node-18.0',\n    Node190 = 'node-19.0',\n    Node200 = 'node-20.0',\n    Node210 = 'node-21.0',\n    Node22 = 'node-22',\n    Php80 = 'php-8.0',\n    Php81 = 'php-8.1',\n    Php82 = 'php-8.2',\n    Php83 = 'php-8.3',\n    Ruby30 = 'ruby-3.0',\n    Ruby31 = 'ruby-3.1',\n    Ruby32 = 'ruby-3.2',\n    Ruby33 = 'ruby-3.3',\n    Python38 = 'python-3.8',\n    Python39 = 'python-3.9',\n    Python310 = 'python-3.10',\n    Python311 = 'python-3.11',\n    Python312 = 'python-3.12',\n    Pythonml311 = 'python-ml-3.11',\n    Deno121 = 'deno-1.21',\n    Deno124 = 'deno-1.24',\n    Deno135 = 'deno-1.35',\n    Deno140 = 'deno-1.40',\n    Deno146 = 'deno-1.46',\n    Deno20 = 'deno-2.0',\n    Dart215 = 'dart-2.15',\n    Dart216 = 'dart-2.16',\n    Dart217 = 'dart-2.17',\n    Dart218 = 'dart-2.18',\n    Dart30 = 'dart-3.0',\n    Dart31 = 'dart-3.1',\n    Dart33 = 'dart-3.3',\n    Dart35 = 'dart-3.5',\n    Dotnet60 = 'dotnet-6.0',\n    Dotnet70 = 'dotnet-7.0',\n    Dotnet80 = 'dotnet-8.0',\n    Java80 = 'java-8.0',\n    Java110 = 'java-11.0',\n    Java170 = 'java-17.0',\n    Java180 = 'java-18.0',\n    Java210 = 'java-21.0',\n    Java22 = 'java-22',\n    Swift55 = 'swift-5.5',\n    Swift58 = 'swift-5.8',\n    Swift59 = 'swift-5.9',\n    Swift510 = 'swift-5.10',\n    Kotlin16 = 'kotlin-1.6',\n    Kotlin18 = 'kotlin-1.8',\n    Kotlin19 = 'kotlin-1.9',\n    Kotlin20 = 'kotlin-2.0',\n    Cpp17 = 'cpp-17',\n    Cpp20 = 'cpp-20',\n    Bun10 = 'bun-1.0',\n    Bun11 = 'bun-1.1',\n    Go123 = 'go-1.23',\n    Static1 = 'static-1',\n    Flutter324 = 'flutter-3.24',\n}"],"names":["Runtime"],"mappings":";;;;AAAO,IAAK,UAAL,aAAA,GAAA,CAAA,CAAKA,aAAL;IACHA,QAAAA,CAAA,UAAA,GAAU;IACVA,QAAAA,CAAA,UAAA,GAAU;IACVA,QAAAA,CAAA,UAAA,GAAU;IACVA,QAAAA,CAAA,UAAA,GAAU;IACVA,QAAAA,CAAA,UAAA,GAAU;IACVA,QAAAA,CAAA,UAAA,GAAU;IACVA,QAAAA,CAAA,SAAA,GAAS;IACTA,QAAAA,CAAA,QAAA,GAAQ;IACRA,QAAAA,CAAA,QAAA,GAAQ;IACRA,QAAAA,CAAA,QAAA,GAAQ;IACRA,QAAAA,CAAA,QAAA,GAAQ;IACRA,QAAAA,CAAA,SAAA,GAAS;IACTA,QAAAA,CAAA,SAAA,GAAS;IACTA,QAAAA,CAAA,SAAA,GAAS;IACTA,QAAAA,CAAA,SAAA,GAAS;IACTA,QAAAA,CAAA,WAAA,GAAW;IACXA,QAAAA,CAAA,WAAA,GAAW;IACXA,QAAAA,CAAA,YAAA,GAAY;IACZA,QAAAA,CAAA,YAAA,GAAY;IACZA,QAAAA,CAAA,YAAA,GAAY;IACZA,QAAAA,CAAA,cAAA,GAAc;IACdA,QAAAA,CAAA,UAAA,GAAU;IACVA,QAAAA,CAAA,UAAA,GAAU;IACVA,QAAAA,CAAA,UAAA,GAAU;IACVA,QAAAA,CAAA,UAAA,GAAU;IACVA,QAAAA,CAAA,UAAA,GAAU;IACVA,QAAAA,CAAA,SAAA,GAAS;IACTA,QAAAA,CAAA,UAAA,GAAU;IACVA,QAAAA,CAAA,UAAA,GAAU;IACVA,QAAAA,CAAA,UAAA,GAAU;IACVA,QAAAA,CAAA,UAAA,GAAU;IACVA,QAAAA,CAAA,SAAA,GAAS;IACTA,QAAAA,CAAA,SAAA,GAAS;IACTA,QAAAA,CAAA,SAAA,GAAS;IACTA,QAAAA,CAAA,SAAA,GAAS;IACTA,QAAAA,CAAA,WAAA,GAAW;IACXA,QAAAA,CAAA,WAAA,GAAW;IACXA,QAAAA,CAAA,WAAA,GAAW;IACXA,QAAAA,CAAA,SAAA,GAAS;IACTA,QAAAA,CAAA,UAAA,GAAU;IACVA,QAAAA,CAAA,UAAA,GAAU;IACVA,QAAAA,CAAA,UAAA,GAAU;IACVA,QAAAA,CAAA,UAAA,GAAU;IACVA,QAAAA,CAAA,SAAA,GAAS;IACTA,QAAAA,CAAA,UAAA,GAAU;IACVA,QAAAA,CAAA,UAAA,GAAU;IACVA,QAAAA,CAAA,UAAA,GAAU;IACVA,QAAAA,CAAA,WAAA,GAAW;IACXA,QAAAA,CAAA,WAAA,GAAW;IACXA,QAAAA,CAAA,WAAA,GAAW;IACXA,QAAAA,CAAA,WAAA,GAAW;IACXA,QAAAA,CAAA,WAAA,GAAW;IACXA,QAAAA,CAAA,QAAA,GAAQ;IACRA,QAAAA,CAAA,QAAA,GAAQ;IACRA,QAAAA,CAAA,QAAA,GAAQ;IACRA,QAAAA,CAAA,QAAA,GAAQ;IACRA,QAAAA,CAAA,QAAA,GAAQ;IACRA,QAAAA,CAAA,UAAA,GAAU;IACVA,QAAAA,CAAA,aAAA,GAAa;IA3DL,OAAAA;AAAA,CAAA,EAAA,WAAA,CAAA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9773, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/enums/execution-method.ts"],"sourcesContent":["export enum ExecutionMethod {\n    GET = 'GET',\n    POST = 'POST',\n    PUT = 'PUT',\n    PATCH = 'PATCH',\n    DELETE = 'DELETE',\n    OPTIONS = 'OPTIONS',\n}"],"names":["ExecutionMethod"],"mappings":";;;;AAAO,IAAK,kBAAL,aAAA,GAAA,CAAA,CAAKA,qBAAL;IACHA,gBAAAA,CAAA,MAAA,GAAM;IACNA,gBAAAA,CAAA,OAAA,GAAO;IACPA,gBAAAA,CAAA,MAAA,GAAM;IACNA,gBAAAA,CAAA,QAAA,GAAQ;IACRA,gBAAAA,CAAA,SAAA,GAAS;IACTA,gBAAAA,CAAA,UAAA,GAAU;IANF,OAAAA;AAAA,CAAA,EAAA,mBAAA,CAAA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9795, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/enums/name.ts"],"sourcesContent":["export enum Name {\n    V1database = 'v1-database',\n    V1deletes = 'v1-deletes',\n    V1audits = 'v1-audits',\n    V1mails = 'v1-mails',\n    V1functions = 'v1-functions',\n    V1usage = 'v1-usage',\n    V1usagedump = 'v1-usage-dump',\n    V1webhooks = 'v1-webhooks',\n    V1certificates = 'v1-certificates',\n    V1builds = 'v1-builds',\n    V1messaging = 'v1-messaging',\n    V1migrations = 'v1-migrations',\n}"],"names":["Name"],"mappings":";;;;AAAO,IAAK,OAAL,aAAA,GAAA,CAAA,CAAKA,UAAL;IACHA,KAAAA,CAAA,aAAA,GAAa;IACbA,KAAAA,CAAA,YAAA,GAAY;IACZA,KAAAA,CAAA,WAAA,GAAW;IACXA,KAAAA,CAAA,UAAA,GAAU;IACVA,KAAAA,CAAA,cAAA,GAAc;IACdA,KAAAA,CAAA,UAAA,GAAU;IACVA,KAAAA,CAAA,cAAA,GAAc;IACdA,KAAAA,CAAA,aAAA,GAAa;IACbA,KAAAA,CAAA,iBAAA,GAAiB;IACjBA,KAAAA,CAAA,WAAA,GAAW;IACXA,KAAAA,CAAA,cAAA,GAAc;IACdA,KAAAA,CAAA,eAAA,GAAe;IAZP,OAAAA;AAAA,CAAA,EAAA,QAAA,CAAA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9823, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/enums/message-priority.ts"],"sourcesContent":["export enum MessagePriority {\n    Normal = 'normal',\n    High = 'high',\n}"],"names":["MessagePriority"],"mappings":";;;;AAAO,IAAK,kBAAL,aAAA,GAAA,CAAA,CAAKA,qBAAL;IACHA,gBAAAA,CAAA,SAAA,GAAS;IACTA,gBAAAA,CAAA,OAAA,GAAO;IAFC,OAAAA;AAAA,CAAA,EAAA,mBAAA,CAAA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9841, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/enums/smtp-encryption.ts"],"sourcesContent":["export enum SmtpEncryption {\n    None = 'none',\n    Ssl = 'ssl',\n    Tls = 'tls',\n}"],"names":["SmtpEncryption"],"mappings":";;;;AAAO,IAAK,iBAAL,aAAA,GAAA,CAAA,CAAKA,oBAAL;IACHA,eAAAA,CAAA,OAAA,GAAO;IACPA,eAAAA,CAAA,MAAA,GAAM;IACNA,eAAAA,CAAA,MAAA,GAAM;IAHE,OAAAA;AAAA,CAAA,EAAA,kBAAA,CAAA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9860, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/enums/compression.ts"],"sourcesContent":["export enum Compression {\n    None = 'none',\n    Gzip = 'gzip',\n    Zstd = 'zstd',\n}"],"names":["Compression"],"mappings":";;;;AAAO,IAAK,cAAL,aAAA,GAAA,CAAA,CAAKA,iBAAL;IACHA,YAAAA,CAAA,OAAA,GAAO;IACPA,YAAAA,CAAA,OAAA,GAAO;IACPA,YAAAA,CAAA,OAAA,GAAO;IAHC,OAAAA;AAAA,CAAA,EAAA,eAAA,CAAA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9879, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/enums/image-gravity.ts"],"sourcesContent":["export enum ImageGravity {\n    Center = 'center',\n    Topleft = 'top-left',\n    Top = 'top',\n    Topright = 'top-right',\n    Left = 'left',\n    Right = 'right',\n    Bottomleft = 'bottom-left',\n    Bottom = 'bottom',\n    Bottomright = 'bottom-right',\n}"],"names":["ImageGravity"],"mappings":";;;;AAAO,IAAK,eAAL,aAAA,GAAA,CAAA,CAAKA,kBAAL;IACHA,aAAAA,CAAA,SAAA,GAAS;IACTA,aAAAA,CAAA,UAAA,GAAU;IACVA,aAAAA,CAAA,MAAA,GAAM;IACNA,aAAAA,CAAA,WAAA,GAAW;IACXA,aAAAA,CAAA,OAAA,GAAO;IACPA,aAAAA,CAAA,QAAA,GAAQ;IACRA,aAAAA,CAAA,aAAA,GAAa;IACbA,aAAAA,CAAA,SAAA,GAAS;IACTA,aAAAA,CAAA,cAAA,GAAc;IATN,OAAAA;AAAA,CAAA,EAAA,gBAAA,CAAA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9904, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/enums/image-format.ts"],"sourcesContent":["export enum ImageFormat {\n    Jpg = 'jpg',\n    Jpeg = 'jpeg',\n    Gif = 'gif',\n    Png = 'png',\n    Webp = 'webp',\n    Avif = 'avif',\n}"],"names":["ImageFormat"],"mappings":";;;;AAAO,IAAK,cAAL,aAAA,GAAA,CAAA,CAAKA,iBAAL;IACHA,YAAAA,CAAA,MAAA,GAAM;IACNA,YAAAA,CAAA,OAAA,GAAO;IACPA,YAAAA,CAAA,MAAA,GAAM;IACNA,YAAAA,CAAA,MAAA,GAAM;IACNA,YAAAA,CAAA,OAAA,GAAO;IACPA,YAAAA,CAAA,OAAA,GAAO;IANC,OAAAA;AAAA,CAAA,EAAA,eAAA,CAAA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9926, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/enums/password-hash.ts"],"sourcesContent":["export enum PasswordHash {\n    Sha1 = 'sha1',\n    Sha224 = 'sha224',\n    Sha256 = 'sha256',\n    Sha384 = 'sha384',\n    Sha512224 = 'sha512/224',\n    Sha512256 = 'sha512/256',\n    Sha512 = 'sha512',\n    Sha3224 = 'sha3-224',\n    Sha3256 = 'sha3-256',\n    Sha3384 = 'sha3-384',\n    Sha3512 = 'sha3-512',\n}"],"names":["PasswordHash"],"mappings":";;;;AAAO,IAAK,eAAL,aAAA,GAAA,CAAA,CAAKA,kBAAL;IACHA,aAAAA,CAAA,OAAA,GAAO;IACPA,aAAAA,CAAA,SAAA,GAAS;IACTA,aAAAA,CAAA,SAAA,GAAS;IACTA,aAAAA,CAAA,SAAA,GAAS;IACTA,aAAAA,CAAA,YAAA,GAAY;IACZA,aAAAA,CAAA,YAAA,GAAY;IACZA,aAAAA,CAAA,SAAA,GAAS;IACTA,aAAAA,CAAA,UAAA,GAAU;IACVA,aAAAA,CAAA,UAAA,GAAU;IACVA,aAAAA,CAAA,UAAA,GAAU;IACVA,aAAAA,CAAA,UAAA,GAAU;IAXF,OAAAA;AAAA,CAAA,EAAA,gBAAA,CAAA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9953, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/enums/messaging-provider-type.ts"],"sourcesContent":["export enum MessagingProviderType {\n    Email = 'email',\n    Sms = 'sms',\n    Push = 'push',\n}"],"names":["MessagingProviderType"],"mappings":";;;;AAAO,IAAK,wBAAL,aAAA,GAAA,CAAA,CAAKA,2BAAL;IACHA,sBAAAA,CAAA,QAAA,GAAQ;IACRA,sBAAAA,CAAA,MAAA,GAAM;IACNA,sBAAAA,CAAA,OAAA,GAAO;IAHC,OAAAA;AAAA,CAAA,EAAA,yBAAA,CAAA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9972, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/node_modules/node-appwrite/src/index.ts"],"sourcesContent":["export { Client, Query, AppwriteException } from './client';\nexport { Account } from './services/account';\nexport { Avatars } from './services/avatars';\nexport { Databases } from './services/databases';\nexport { Functions } from './services/functions';\nexport { Graphql } from './services/graphql';\nexport { Health } from './services/health';\nexport { Locale } from './services/locale';\nexport { Messaging } from './services/messaging';\nexport { Storage } from './services/storage';\nexport { Teams } from './services/teams';\nexport { Users } from './services/users';\nexport type { Models, Payload, UploadProgress } from './client';\nexport type { QueryTypes, QueryTypesList } from './query';\nexport { Permission } from './permission';\nexport { Role } from './role';\nexport { ID } from './id';\nexport { AuthenticatorType } from './enums/authenticator-type';\nexport { AuthenticationFactor } from './enums/authentication-factor';\nexport { OAuthProvider } from './enums/o-auth-provider';\nexport { Browser } from './enums/browser';\nexport { CreditCard } from './enums/credit-card';\nexport { Flag } from './enums/flag';\nexport { RelationshipType } from './enums/relationship-type';\nexport { RelationMutate } from './enums/relation-mutate';\nexport { IndexType } from './enums/index-type';\nexport { Runtime } from './enums/runtime';\nexport { ExecutionMethod } from './enums/execution-method';\nexport { Name } from './enums/name';\nexport { MessagePriority } from './enums/message-priority';\nexport { SmtpEncryption } from './enums/smtp-encryption';\nexport { Compression } from './enums/compression';\nexport { ImageGravity } from './enums/image-gravity';\nexport { ImageFormat } from './enums/image-format';\nexport { PasswordHash } from './enums/password-hash';\nexport { MessagingProviderType } from './enums/messaging-provider-type';\n"],"names":[],"mappings":";;AAAA,SAAS,QAAQ,OAAO,yBAAyB;AACjD,SAAS,eAAe;AACxB,SAAS,eAAe;AACxB,SAAS,iBAAiB;AAC1B,SAAS,iBAAiB;AAC1B,SAAS,eAAe;AACxB,SAAS,cAAc;AACvB,SAAS,cAAc;AACvB,SAAS,iBAAiB;AAC1B,SAAS,eAAe;AACxB,SAAS,aAAa;AACtB,SAAS,aAAa;AAGtB,SAAS,kBAAkB;AAC3B,SAAS,YAAY;AACrB,SAAS,UAAU;AACnB,SAAS,yBAAyB;AAClC,SAAS,4BAA4B;AACrC,SAAS,qBAAqB;AAC9B,SAAS,eAAe;AACxB,SAAS,kBAAkB;AAC3B,SAAS,YAAY;AACrB,SAAS,wBAAwB;AACjC,SAAS,sBAAsB;AAC/B,SAAS,iBAAiB;AAC1B,SAAS,eAAe;AACxB,SAAS,uBAAuB;AAChC,SAAS,YAAY;AACrB,SAAS,uBAAuB;AAChC,SAAS,sBAAsB;AAC/B,SAAS,mBAAmB;AAC5B,SAAS,oBAAoB;AAC7B,SAAS,mBAAmB;AAC5B,SAAS,oBAAoB,4RAC7B,SAAS,sBAAA,OAA6B","ignoreList":[0],"debugId":null}}]
}