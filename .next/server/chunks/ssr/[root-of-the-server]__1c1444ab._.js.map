{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/lib/actions/file.action.ts"],"sourcesContent":["\"use server\";\n\nimport { createAdminClient } from \"../appwrite\";\nimport { InputFile } from \"node-appwrite/file\";\nimport { appwriteConfig } from \"../appwrite/config\";\nimport { ID, Models, Query } from \"node-appwrite\";\nimport { constructFileUrl, getFileType, parseStringify } from \"../utils\";\nimport { revalidatePath } from \"next/cache\";\nimport { getCurrentUser } from \"./user.actions\";\n\nconst handleError = (error: unknown, message: string) => {\n    console.log(error, message);\n    throw error;\n};\n\nexport const uploadFile = async ({\n    file,\n    ownerId,\n    accountId,\n    path,\n}: UploadFileProps) => {\n    const { storage, databases } = await createAdminClient();\n\n    try {\n        const inputFile = InputFile.fromBuffer(file, file.name);\n\n        const bucketFile = await storage.createFile(\n            appwriteConfig.bucketId,\n            ID.unique(),\n            inputFile\n        );\n\n        const fileDocument = {\n            type: getFileType(bucketFile.name).type,\n            name: bucketFile.name,\n            url: constructFileUrl(bucketFile.$id),\n            extension: getFileType(bucketFile.name).extension,\n            size: bucketFile.sizeOriginal,\n            owner: ownerId,\n            accountId: accountId,\n            users: [],\n            bucketFieldId: bucketFile.$id,\n        };\n\n        const newFile = await databases\n            .createDocument(\n                appwriteConfig.databaseId,\n                appwriteConfig.filesCollectionId,\n                ID.unique(),\n                fileDocument\n            )\n            .catch(async (error: unknown) => {\n                await storage.deleteFile(\n                    appwriteConfig.bucketId,\n                    bucketFile.$id\n                );\n                handleError(error, \"Failed to create file document\");\n            });\n\n        revalidatePath(path);\n\n        return parseStringify(newFile);\n    } catch (error) {\n        handleError(error, \"Failed to upload file.\");\n    }\n};\n\nconst createQueries = (\n    currentUser: Models.Document,\n    types: string[],\n    searchText: string,\n    sort: string,\n    limit?: number\n) => {\n    const queries = [\n        Query.or([\n            Query.equal(\"owner\", [currentUser.$id]),\n            Query.contains(\"users\", [currentUser.email]),\n        ]),\n    ];\n\n    if (types.length > 0) queries.push(Query.equal(\"type\", types));\n    if (searchText) queries.push(Query.contains(\"name\", searchText));\n    if (limit) queries.push(Query.limit(limit));\n\n    if (sort) {\n        const [sortBy, orderBy] = sort.split(\"-\");\n\n        queries.push(\n            orderBy === \"asc\" ? Query.orderAsc(sortBy) : Query.orderDesc(sortBy)\n        );\n    }\n\n    return queries;\n};\n\nexport const getFiles = async ({\n    types = [],\n    searchText = \"\",\n    sort = \"$createdAt-desc\",\n    limit,\n}: GetFilesProps) => {\n    const { databases } = await createAdminClient();\n\n    try {\n        const currentUser = await getCurrentUser();\n\n        if (!currentUser) throw new Error(\"User not found\");\n\n        const queries = createQueries(\n            currentUser,\n            types,\n            searchText,\n            sort,\n            limit\n        );\n\n        console.log({ currentUser, queries });\n\n        const files = await databases.listDocuments(\n            appwriteConfig.databaseId,\n            appwriteConfig.filesCollectionId,\n            queries\n        );\n\n        console.log({ files });\n\n        return parseStringify(files);\n    } catch (error) {\n        handleError(error, \"Failed to get files\");\n    }\n};\n\nexport const renameFile = async ({\n    fileId,\n    name,\n    extension,\n    path,\n}: RenameFileProps) => {\n    const { databases } = await createAdminClient();\n\n    try {\n        const newName = `${name}.${extension}`;\n\n        const updatedFile = await databases.updateDocument(\n            appwriteConfig.databaseId,\n            appwriteConfig.filesCollectionId,\n            fileId,\n            {\n                name: newName,\n            }\n        );\n\n        revalidatePath(path);\n        return parseStringify(updatedFile);\n    } catch (error) {\n        handleError(error, \"Failed to rename file\");\n    }\n};\n\nexport const updateFileUser = async ({\n    fileId,\n    emails,\n    path,\n}: UpdateFileUsersProps) => {\n    const { databases } = await createAdminClient();\n\n    try {\n        const updatedFile = await databases.updateDocument(\n            appwriteConfig.databaseId,\n            appwriteConfig.filesCollectionId,\n            fileId,\n            {\n                users: emails,\n            }\n        );\n\n        revalidatePath(path);\n        return parseStringify(updatedFile);\n    } catch (error) {\n        handleError(error, \"Failed to rename file\");\n    }\n};\n\nexport const deleteFile = async ({\n    fileId,\n    bucketFileId,\n    path,\n}: DeleteFileProps) => {\n    const { databases, storage } = await createAdminClient();\n\n    try {\n        const deletedFile = await databases.deleteDocument(\n            appwriteConfig.databaseId,\n            appwriteConfig.filesCollectionId,\n            fileId\n        );\n\n        if (deletedFile) {\n            await storage.deleteFile(appwriteConfig.bucketId, bucketFileId);\n        }\n\n        revalidatePath(path);\n        return parseStringify({ status: \"success\" });\n    } catch (error) {\n        handleError(error, \"Failed to rename file\");\n    }\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 171, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/.next-internal/server/app/%28root%29/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {$$RSC_SERVER_ACTION_0 as '00ca30670c488ed0f4e6145a62cad4e88220cb36a2'} from 'ACTIONS_MODULE0'\nexport {getCurrentUser as '7f1c7f2fc536f4be384cfbfe63d057b32d1e243475'} from 'ACTIONS_MODULE1'\nexport {signOutUser as '7f4deb24e1f0fe22c488f94549f00077fcb1b40084'} from 'ACTIONS_MODULE1'\nexport {signInUser as '7f978954c5a642a14bee359844137f4665893dc18c'} from 'ACTIONS_MODULE1'\nexport {createAccount as '7fbd2fa925ba7d865d47033d608db409f2caa4be0e'} from 'ACTIONS_MODULE1'\nexport {sendEmailOTP as '7fc932ab75f2356818f9faee00df0ed2b70621b98c'} from 'ACTIONS_MODULE1'\nexport {verifySecret as '7ff32fecbf6e333c8259cff2858f6410be38e3b8e3'} from 'ACTIONS_MODULE1'\nexport {createSessionClient as '7f41e91d2e71ca2b99bd93267517034802cc7f5df7'} from 'ACTIONS_MODULE2'\nexport {createAdminClient as '7f424f1c608eb0c6fce2188ee601e152f35a62305d'} from 'ACTIONS_MODULE2'\nexport {getFiles as '7fa49ac3cf8787fa17b38608a89e5894552a0fc6cb'} from 'ACTIONS_MODULE3'\nexport {uploadFile as '7fc662fc5127a6fe33cfec8705cc667705a8a6019a'} from 'ACTIONS_MODULE3'\n"],"names":[],"mappings":";AAAA;AACA;AAMA;AAEA","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///Users/amaan/Desktop/Programming/React/store_it/app/%28root%29/page.tsx"],"sourcesContent":["export default function Home() {\n    return (\n\t\t<div className=\"flex-center h-screen\">\n\t\t\t<h1 className=\"h1\">StoreIt - The Only Storage You Need.</h1>\n\t\t</div>\n    );\n}\n"],"names":[],"mappings":";;;;;AAAe,SAAS;IACpB,qBACF,8OAAC;QAAI,WAAU;kBACd,cAAA,8OAAC;YAAG,WAAU;sBAAK;;;;;;;;;;;AAGtB","debugId":null}}]
}